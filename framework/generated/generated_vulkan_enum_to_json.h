/*
** Copyright (c) 2018-2023 Valve Corporation
** Copyright (c) 2018-2023 LunarG, Inc.
** Copyright (c) 2023 Advanced Micro Devices, Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and associated documentation files (the "Software"),
** to deal in the Software without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Software, and to permit persons to whom the
** Software is furnished to do so, subject to the following conditions:
**
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
*/

/*
** This file is generated from the Khronos Vulkan XML API Registry.
**
*/

#ifndef  GFXRECON_GENERATED_VULKAN_ENUM_TO_JSON_H
#define  GFXRECON_GENERATED_VULKAN_ENUM_TO_JSON_H

#include "format/platform_types.h"
#include "util/json_util.h"

#include "vulkan/vulkan.h"
#include "vk_video/vulkan_video_codec_h264std.h"
#include "vk_video/vulkan_video_codec_h264std_decode.h"
#include "vk_video/vulkan_video_codec_h264std_encode.h"
#include "vk_video/vulkan_video_codec_h265std.h"
#include "vk_video/vulkan_video_codec_h265std_decode.h"
#include "vk_video/vulkan_video_codec_h265std_encode.h"
#include "vk_video/vulkan_video_codecs_common.h"

GFXRECON_BEGIN_NAMESPACE(gfxrecon)
GFXRECON_BEGIN_NAMESPACE(decode)

void StdVideoAV1ChromaSamplePositionToJson(nlohmann::ordered_json& jdata, const StdVideoAV1ChromaSamplePosition& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1ColorPrimariesToJson(nlohmann::ordered_json& jdata, const StdVideoAV1ColorPrimaries& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1FrameRestorationTypeToJson(nlohmann::ordered_json& jdata, const StdVideoAV1FrameRestorationType& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1FrameTypeToJson(nlohmann::ordered_json& jdata, const StdVideoAV1FrameType& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1InterpolationFilterToJson(nlohmann::ordered_json& jdata, const StdVideoAV1InterpolationFilter& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1LevelToJson(nlohmann::ordered_json& jdata, const StdVideoAV1Level& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1MatrixCoefficientsToJson(nlohmann::ordered_json& jdata, const StdVideoAV1MatrixCoefficients& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1ProfileToJson(nlohmann::ordered_json& jdata, const StdVideoAV1Profile& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1ReferenceNameToJson(nlohmann::ordered_json& jdata, const StdVideoAV1ReferenceName& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1TransferCharacteristicsToJson(nlohmann::ordered_json& jdata, const StdVideoAV1TransferCharacteristics& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoAV1TxModeToJson(nlohmann::ordered_json& jdata, const StdVideoAV1TxMode& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoDecodeH264FieldOrderCountToJson(nlohmann::ordered_json& jdata, const StdVideoDecodeH264FieldOrderCount& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264AspectRatioIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH264AspectRatioIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264CabacInitIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH264CabacInitIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264ChromaFormatIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH264ChromaFormatIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264DisableDeblockingFilterIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH264DisableDeblockingFilterIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264LevelIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH264LevelIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264MemMgmtControlOpToJson(nlohmann::ordered_json& jdata, const StdVideoH264MemMgmtControlOp& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264ModificationOfPicNumsIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH264ModificationOfPicNumsIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264NonVclNaluTypeToJson(nlohmann::ordered_json& jdata, const StdVideoH264NonVclNaluType& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264PictureTypeToJson(nlohmann::ordered_json& jdata, const StdVideoH264PictureType& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264PocTypeToJson(nlohmann::ordered_json& jdata, const StdVideoH264PocType& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264ProfileIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH264ProfileIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264SliceTypeToJson(nlohmann::ordered_json& jdata, const StdVideoH264SliceType& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH264WeightedBipredIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH264WeightedBipredIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH265AspectRatioIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH265AspectRatioIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH265ChromaFormatIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH265ChromaFormatIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH265LevelIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH265LevelIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH265PictureTypeToJson(nlohmann::ordered_json& jdata, const StdVideoH265PictureType& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH265ProfileIdcToJson(nlohmann::ordered_json& jdata, const StdVideoH265ProfileIdc& value, const util::JsonOptions& options = util::JsonOptions());
void StdVideoH265SliceTypeToJson(nlohmann::ordered_json& jdata, const StdVideoH265SliceType& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccelerationStructureBuildTypeKHRToJson(nlohmann::ordered_json& jdata, const VkAccelerationStructureBuildTypeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccelerationStructureCompatibilityKHRToJson(nlohmann::ordered_json& jdata, const VkAccelerationStructureCompatibilityKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccelerationStructureCreateFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkAccelerationStructureCreateFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccelerationStructureMemoryRequirementsTypeNVToJson(nlohmann::ordered_json& jdata, const VkAccelerationStructureMemoryRequirementsTypeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccelerationStructureMotionInstanceTypeNVToJson(nlohmann::ordered_json& jdata, const VkAccelerationStructureMotionInstanceTypeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccelerationStructureTypeKHRToJson(nlohmann::ordered_json& jdata, const VkAccelerationStructureTypeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccessFlagBitsToJson(nlohmann::ordered_json& jdata, const VkAccessFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccessFlagBits2ToJson(nlohmann::ordered_json& jdata, const VkAccessFlagBits2& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccessFlagBits3KHRToJson(nlohmann::ordered_json& jdata, const VkAccessFlagBits3KHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkAcquireProfilingLockFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkAcquireProfilingLockFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkAntiLagModeAMDToJson(nlohmann::ordered_json& jdata, const VkAntiLagModeAMD& value, const util::JsonOptions& options = util::JsonOptions());
void VkAntiLagStageAMDToJson(nlohmann::ordered_json& jdata, const VkAntiLagStageAMD& value, const util::JsonOptions& options = util::JsonOptions());
void VkAttachmentDescriptionFlagBitsToJson(nlohmann::ordered_json& jdata, const VkAttachmentDescriptionFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkAttachmentLoadOpToJson(nlohmann::ordered_json& jdata, const VkAttachmentLoadOp& value, const util::JsonOptions& options = util::JsonOptions());
void VkAttachmentStoreOpToJson(nlohmann::ordered_json& jdata, const VkAttachmentStoreOp& value, const util::JsonOptions& options = util::JsonOptions());
void VkBlendFactorToJson(nlohmann::ordered_json& jdata, const VkBlendFactor& value, const util::JsonOptions& options = util::JsonOptions());
void VkBlendOpToJson(nlohmann::ordered_json& jdata, const VkBlendOp& value, const util::JsonOptions& options = util::JsonOptions());
void VkBlendOverlapEXTToJson(nlohmann::ordered_json& jdata, const VkBlendOverlapEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkBlockMatchWindowCompareModeQCOMToJson(nlohmann::ordered_json& jdata, const VkBlockMatchWindowCompareModeQCOM& value, const util::JsonOptions& options = util::JsonOptions());
void VkBorderColorToJson(nlohmann::ordered_json& jdata, const VkBorderColor& value, const util::JsonOptions& options = util::JsonOptions());
void VkBufferCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkBufferCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkBufferUsageFlagBitsToJson(nlohmann::ordered_json& jdata, const VkBufferUsageFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkBufferUsageFlagBits2ToJson(nlohmann::ordered_json& jdata, const VkBufferUsageFlagBits2& value, const util::JsonOptions& options = util::JsonOptions());
void VkBuildAccelerationStructureFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkBuildAccelerationStructureFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkBuildAccelerationStructureModeKHRToJson(nlohmann::ordered_json& jdata, const VkBuildAccelerationStructureModeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkBuildMicromapFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkBuildMicromapFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkBuildMicromapModeEXTToJson(nlohmann::ordered_json& jdata, const VkBuildMicromapModeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkChromaLocationToJson(nlohmann::ordered_json& jdata, const VkChromaLocation& value, const util::JsonOptions& options = util::JsonOptions());
void VkCoarseSampleOrderTypeNVToJson(nlohmann::ordered_json& jdata, const VkCoarseSampleOrderTypeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkColorComponentFlagBitsToJson(nlohmann::ordered_json& jdata, const VkColorComponentFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkColorSpaceKHRToJson(nlohmann::ordered_json& jdata, const VkColorSpaceKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkCommandBufferLevelToJson(nlohmann::ordered_json& jdata, const VkCommandBufferLevel& value, const util::JsonOptions& options = util::JsonOptions());
void VkCommandBufferResetFlagBitsToJson(nlohmann::ordered_json& jdata, const VkCommandBufferResetFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkCommandBufferUsageFlagBitsToJson(nlohmann::ordered_json& jdata, const VkCommandBufferUsageFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkCommandPoolCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkCommandPoolCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkCommandPoolResetFlagBitsToJson(nlohmann::ordered_json& jdata, const VkCommandPoolResetFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkCompareOpToJson(nlohmann::ordered_json& jdata, const VkCompareOp& value, const util::JsonOptions& options = util::JsonOptions());
void VkComponentSwizzleToJson(nlohmann::ordered_json& jdata, const VkComponentSwizzle& value, const util::JsonOptions& options = util::JsonOptions());
void VkComponentTypeKHRToJson(nlohmann::ordered_json& jdata, const VkComponentTypeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkCompositeAlphaFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkCompositeAlphaFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkConditionalRenderingFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkConditionalRenderingFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkConservativeRasterizationModeEXTToJson(nlohmann::ordered_json& jdata, const VkConservativeRasterizationModeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkCooperativeVectorMatrixLayoutNVToJson(nlohmann::ordered_json& jdata, const VkCooperativeVectorMatrixLayoutNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkCopyAccelerationStructureModeKHRToJson(nlohmann::ordered_json& jdata, const VkCopyAccelerationStructureModeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkCopyMicromapModeEXTToJson(nlohmann::ordered_json& jdata, const VkCopyMicromapModeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkCoverageModulationModeNVToJson(nlohmann::ordered_json& jdata, const VkCoverageModulationModeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkCoverageReductionModeNVToJson(nlohmann::ordered_json& jdata, const VkCoverageReductionModeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkCubicFilterWeightsQCOMToJson(nlohmann::ordered_json& jdata, const VkCubicFilterWeightsQCOM& value, const util::JsonOptions& options = util::JsonOptions());
void VkCullModeFlagBitsToJson(nlohmann::ordered_json& jdata, const VkCullModeFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkDebugReportFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkDebugReportFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDebugReportObjectTypeEXTToJson(nlohmann::ordered_json& jdata, const VkDebugReportObjectTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDebugUtilsMessageSeverityFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkDebugUtilsMessageSeverityFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDebugUtilsMessageTypeFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkDebugUtilsMessageTypeFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDependencyFlagBitsToJson(nlohmann::ordered_json& jdata, const VkDependencyFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkDepthBiasRepresentationEXTToJson(nlohmann::ordered_json& jdata, const VkDepthBiasRepresentationEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDepthClampModeEXTToJson(nlohmann::ordered_json& jdata, const VkDepthClampModeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorBindingFlagBitsToJson(nlohmann::ordered_json& jdata, const VkDescriptorBindingFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorPoolCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkDescriptorPoolCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorSetLayoutCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkDescriptorSetLayoutCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorTypeToJson(nlohmann::ordered_json& jdata, const VkDescriptorType& value, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorUpdateTemplateTypeToJson(nlohmann::ordered_json& jdata, const VkDescriptorUpdateTemplateType& value, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceAddressBindingFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkDeviceAddressBindingFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceAddressBindingTypeEXTToJson(nlohmann::ordered_json& jdata, const VkDeviceAddressBindingTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceDiagnosticsConfigFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkDeviceDiagnosticsConfigFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceEventTypeEXTToJson(nlohmann::ordered_json& jdata, const VkDeviceEventTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceFaultAddressTypeEXTToJson(nlohmann::ordered_json& jdata, const VkDeviceFaultAddressTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceFaultVendorBinaryHeaderVersionEXTToJson(nlohmann::ordered_json& jdata, const VkDeviceFaultVendorBinaryHeaderVersionEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceGroupPresentModeFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkDeviceGroupPresentModeFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceMemoryReportEventTypeEXTToJson(nlohmann::ordered_json& jdata, const VkDeviceMemoryReportEventTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceQueueCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkDeviceQueueCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkDirectDriverLoadingModeLUNARGToJson(nlohmann::ordered_json& jdata, const VkDirectDriverLoadingModeLUNARG& value, const util::JsonOptions& options = util::JsonOptions());
void VkDiscardRectangleModeEXTToJson(nlohmann::ordered_json& jdata, const VkDiscardRectangleModeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDisplacementMicromapFormatNVToJson(nlohmann::ordered_json& jdata, const VkDisplacementMicromapFormatNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkDisplayEventTypeEXTToJson(nlohmann::ordered_json& jdata, const VkDisplayEventTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDisplayPlaneAlphaFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkDisplayPlaneAlphaFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkDisplayPowerStateEXTToJson(nlohmann::ordered_json& jdata, const VkDisplayPowerStateEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkDisplaySurfaceStereoTypeNVToJson(nlohmann::ordered_json& jdata, const VkDisplaySurfaceStereoTypeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkDriverIdToJson(nlohmann::ordered_json& jdata, const VkDriverId& value, const util::JsonOptions& options = util::JsonOptions());
void VkDynamicStateToJson(nlohmann::ordered_json& jdata, const VkDynamicState& value, const util::JsonOptions& options = util::JsonOptions());
void VkEventCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkEventCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkExternalFenceFeatureFlagBitsToJson(nlohmann::ordered_json& jdata, const VkExternalFenceFeatureFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkExternalFenceHandleTypeFlagBitsToJson(nlohmann::ordered_json& jdata, const VkExternalFenceHandleTypeFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkExternalMemoryFeatureFlagBitsToJson(nlohmann::ordered_json& jdata, const VkExternalMemoryFeatureFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkExternalMemoryFeatureFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkExternalMemoryFeatureFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkExternalMemoryHandleTypeFlagBitsToJson(nlohmann::ordered_json& jdata, const VkExternalMemoryHandleTypeFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkExternalMemoryHandleTypeFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkExternalMemoryHandleTypeFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkExternalSemaphoreFeatureFlagBitsToJson(nlohmann::ordered_json& jdata, const VkExternalSemaphoreFeatureFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkExternalSemaphoreHandleTypeFlagBitsToJson(nlohmann::ordered_json& jdata, const VkExternalSemaphoreHandleTypeFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkFenceCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkFenceCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkFenceImportFlagBitsToJson(nlohmann::ordered_json& jdata, const VkFenceImportFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkFilterToJson(nlohmann::ordered_json& jdata, const VkFilter& value, const util::JsonOptions& options = util::JsonOptions());
void VkFormatToJson(nlohmann::ordered_json& jdata, const VkFormat& value, const util::JsonOptions& options = util::JsonOptions());
void VkFormatFeatureFlagBitsToJson(nlohmann::ordered_json& jdata, const VkFormatFeatureFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkFormatFeatureFlagBits2ToJson(nlohmann::ordered_json& jdata, const VkFormatFeatureFlagBits2& value, const util::JsonOptions& options = util::JsonOptions());
void VkFragmentShadingRateCombinerOpKHRToJson(nlohmann::ordered_json& jdata, const VkFragmentShadingRateCombinerOpKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkFragmentShadingRateNVToJson(nlohmann::ordered_json& jdata, const VkFragmentShadingRateNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkFragmentShadingRateTypeNVToJson(nlohmann::ordered_json& jdata, const VkFragmentShadingRateTypeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkFrameBoundaryFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkFrameBoundaryFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkFramebufferCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkFramebufferCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkFrontFaceToJson(nlohmann::ordered_json& jdata, const VkFrontFace& value, const util::JsonOptions& options = util::JsonOptions());
void VkFullScreenExclusiveEXTToJson(nlohmann::ordered_json& jdata, const VkFullScreenExclusiveEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkGeometryFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkGeometryFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkGeometryInstanceFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkGeometryInstanceFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkGeometryTypeKHRToJson(nlohmann::ordered_json& jdata, const VkGeometryTypeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkGraphicsPipelineLibraryFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkGraphicsPipelineLibraryFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkHostImageCopyFlagBitsToJson(nlohmann::ordered_json& jdata, const VkHostImageCopyFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageAspectFlagBitsToJson(nlohmann::ordered_json& jdata, const VkImageAspectFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageCompressionFixedRateFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkImageCompressionFixedRateFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageCompressionFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkImageCompressionFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkImageCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageLayoutToJson(nlohmann::ordered_json& jdata, const VkImageLayout& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageTilingToJson(nlohmann::ordered_json& jdata, const VkImageTiling& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageTypeToJson(nlohmann::ordered_json& jdata, const VkImageType& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageUsageFlagBitsToJson(nlohmann::ordered_json& jdata, const VkImageUsageFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageViewCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkImageViewCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkImageViewTypeToJson(nlohmann::ordered_json& jdata, const VkImageViewType& value, const util::JsonOptions& options = util::JsonOptions());
void VkIndexTypeToJson(nlohmann::ordered_json& jdata, const VkIndexType& value, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectCommandsInputModeFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkIndirectCommandsInputModeFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectCommandsLayoutUsageFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkIndirectCommandsLayoutUsageFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectCommandsLayoutUsageFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkIndirectCommandsLayoutUsageFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectCommandsTokenTypeEXTToJson(nlohmann::ordered_json& jdata, const VkIndirectCommandsTokenTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectCommandsTokenTypeNVToJson(nlohmann::ordered_json& jdata, const VkIndirectCommandsTokenTypeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectExecutionSetInfoTypeEXTToJson(nlohmann::ordered_json& jdata, const VkIndirectExecutionSetInfoTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectStateFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkIndirectStateFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkInstanceCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkInstanceCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkInternalAllocationTypeToJson(nlohmann::ordered_json& jdata, const VkInternalAllocationType& value, const util::JsonOptions& options = util::JsonOptions());
void VkLatencyMarkerNVToJson(nlohmann::ordered_json& jdata, const VkLatencyMarkerNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkLayerSettingTypeEXTToJson(nlohmann::ordered_json& jdata, const VkLayerSettingTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkLayeredDriverUnderlyingApiMSFTToJson(nlohmann::ordered_json& jdata, const VkLayeredDriverUnderlyingApiMSFT& value, const util::JsonOptions& options = util::JsonOptions());
void VkLineRasterizationModeToJson(nlohmann::ordered_json& jdata, const VkLineRasterizationMode& value, const util::JsonOptions& options = util::JsonOptions());
void VkLogicOpToJson(nlohmann::ordered_json& jdata, const VkLogicOp& value, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryAllocateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkMemoryAllocateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryHeapFlagBitsToJson(nlohmann::ordered_json& jdata, const VkMemoryHeapFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryMapFlagBitsToJson(nlohmann::ordered_json& jdata, const VkMemoryMapFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryOverallocationBehaviorAMDToJson(nlohmann::ordered_json& jdata, const VkMemoryOverallocationBehaviorAMD& value, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryPropertyFlagBitsToJson(nlohmann::ordered_json& jdata, const VkMemoryPropertyFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryUnmapFlagBitsToJson(nlohmann::ordered_json& jdata, const VkMemoryUnmapFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkMicromapCreateFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkMicromapCreateFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkMicromapTypeEXTToJson(nlohmann::ordered_json& jdata, const VkMicromapTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkObjectTypeToJson(nlohmann::ordered_json& jdata, const VkObjectType& value, const util::JsonOptions& options = util::JsonOptions());
void VkOpacityMicromapFormatEXTToJson(nlohmann::ordered_json& jdata, const VkOpacityMicromapFormatEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkOpacityMicromapSpecialIndexEXTToJson(nlohmann::ordered_json& jdata, const VkOpacityMicromapSpecialIndexEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowExecuteFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkOpticalFlowExecuteFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowGridSizeFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkOpticalFlowGridSizeFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowPerformanceLevelNVToJson(nlohmann::ordered_json& jdata, const VkOpticalFlowPerformanceLevelNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowSessionBindingPointNVToJson(nlohmann::ordered_json& jdata, const VkOpticalFlowSessionBindingPointNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowSessionCreateFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkOpticalFlowSessionCreateFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowUsageFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkOpticalFlowUsageFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkOutOfBandQueueTypeNVToJson(nlohmann::ordered_json& jdata, const VkOutOfBandQueueTypeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkPartitionedAccelerationStructureInstanceFlagBitsNVToJson(nlohmann::ordered_json& jdata, const VkPartitionedAccelerationStructureInstanceFlagBitsNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkPartitionedAccelerationStructureOpTypeNVToJson(nlohmann::ordered_json& jdata, const VkPartitionedAccelerationStructureOpTypeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkPeerMemoryFeatureFlagBitsToJson(nlohmann::ordered_json& jdata, const VkPeerMemoryFeatureFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkPerformanceConfigurationTypeINTELToJson(nlohmann::ordered_json& jdata, const VkPerformanceConfigurationTypeINTEL& value, const util::JsonOptions& options = util::JsonOptions());
void VkPerformanceCounterDescriptionFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkPerformanceCounterDescriptionFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkPerformanceCounterScopeKHRToJson(nlohmann::ordered_json& jdata, const VkPerformanceCounterScopeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkPerformanceCounterStorageKHRToJson(nlohmann::ordered_json& jdata, const VkPerformanceCounterStorageKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkPerformanceCounterUnitKHRToJson(nlohmann::ordered_json& jdata, const VkPerformanceCounterUnitKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkPerformanceOverrideTypeINTELToJson(nlohmann::ordered_json& jdata, const VkPerformanceOverrideTypeINTEL& value, const util::JsonOptions& options = util::JsonOptions());
void VkPerformanceParameterTypeINTELToJson(nlohmann::ordered_json& jdata, const VkPerformanceParameterTypeINTEL& value, const util::JsonOptions& options = util::JsonOptions());
void VkPerformanceValueTypeINTELToJson(nlohmann::ordered_json& jdata, const VkPerformanceValueTypeINTEL& value, const util::JsonOptions& options = util::JsonOptions());
void VkPhysicalDeviceLayeredApiKHRToJson(nlohmann::ordered_json& jdata, const VkPhysicalDeviceLayeredApiKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkPhysicalDeviceSchedulingControlsFlagBitsARMToJson(nlohmann::ordered_json& jdata, const VkPhysicalDeviceSchedulingControlsFlagBitsARM& value, const util::JsonOptions& options = util::JsonOptions());
void VkPhysicalDeviceTypeToJson(nlohmann::ordered_json& jdata, const VkPhysicalDeviceType& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineBindPointToJson(nlohmann::ordered_json& jdata, const VkPipelineBindPoint& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCacheCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkPipelineCacheCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCacheHeaderVersionToJson(nlohmann::ordered_json& jdata, const VkPipelineCacheHeaderVersion& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineColorBlendStateCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkPipelineColorBlendStateCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCompilerControlFlagBitsAMDToJson(nlohmann::ordered_json& jdata, const VkPipelineCompilerControlFlagBitsAMD& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkPipelineCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCreateFlagBits2ToJson(nlohmann::ordered_json& jdata, const VkPipelineCreateFlagBits2& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCreationFeedbackFlagBitsToJson(nlohmann::ordered_json& jdata, const VkPipelineCreationFeedbackFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineDepthStencilStateCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkPipelineDepthStencilStateCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineExecutableStatisticFormatKHRToJson(nlohmann::ordered_json& jdata, const VkPipelineExecutableStatisticFormatKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineLayoutCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkPipelineLayoutCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineRobustnessBufferBehaviorToJson(nlohmann::ordered_json& jdata, const VkPipelineRobustnessBufferBehavior& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineRobustnessImageBehaviorToJson(nlohmann::ordered_json& jdata, const VkPipelineRobustnessImageBehavior& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineShaderStageCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkPipelineShaderStageCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineStageFlagBitsToJson(nlohmann::ordered_json& jdata, const VkPipelineStageFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineStageFlagBits2ToJson(nlohmann::ordered_json& jdata, const VkPipelineStageFlagBits2& value, const util::JsonOptions& options = util::JsonOptions());
void VkPointClippingBehaviorToJson(nlohmann::ordered_json& jdata, const VkPointClippingBehavior& value, const util::JsonOptions& options = util::JsonOptions());
void VkPolygonModeToJson(nlohmann::ordered_json& jdata, const VkPolygonMode& value, const util::JsonOptions& options = util::JsonOptions());
void VkPresentGravityFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkPresentGravityFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkPresentModeKHRToJson(nlohmann::ordered_json& jdata, const VkPresentModeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkPresentScalingFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkPresentScalingFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkPrimitiveTopologyToJson(nlohmann::ordered_json& jdata, const VkPrimitiveTopology& value, const util::JsonOptions& options = util::JsonOptions());
void VkProvokingVertexModeEXTToJson(nlohmann::ordered_json& jdata, const VkProvokingVertexModeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkQueryControlFlagBitsToJson(nlohmann::ordered_json& jdata, const VkQueryControlFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkQueryPipelineStatisticFlagBitsToJson(nlohmann::ordered_json& jdata, const VkQueryPipelineStatisticFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkQueryPoolSamplingModeINTELToJson(nlohmann::ordered_json& jdata, const VkQueryPoolSamplingModeINTEL& value, const util::JsonOptions& options = util::JsonOptions());
void VkQueryResultFlagBitsToJson(nlohmann::ordered_json& jdata, const VkQueryResultFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkQueryResultStatusKHRToJson(nlohmann::ordered_json& jdata, const VkQueryResultStatusKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkQueryTypeToJson(nlohmann::ordered_json& jdata, const VkQueryType& value, const util::JsonOptions& options = util::JsonOptions());
void VkQueueFlagBitsToJson(nlohmann::ordered_json& jdata, const VkQueueFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkQueueGlobalPriorityToJson(nlohmann::ordered_json& jdata, const VkQueueGlobalPriority& value, const util::JsonOptions& options = util::JsonOptions());
void VkRasterizationOrderAMDToJson(nlohmann::ordered_json& jdata, const VkRasterizationOrderAMD& value, const util::JsonOptions& options = util::JsonOptions());
void VkRayTracingInvocationReorderModeNVToJson(nlohmann::ordered_json& jdata, const VkRayTracingInvocationReorderModeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkRayTracingLssIndexingModeNVToJson(nlohmann::ordered_json& jdata, const VkRayTracingLssIndexingModeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkRayTracingLssPrimitiveEndCapsModeNVToJson(nlohmann::ordered_json& jdata, const VkRayTracingLssPrimitiveEndCapsModeNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkRayTracingShaderGroupTypeKHRToJson(nlohmann::ordered_json& jdata, const VkRayTracingShaderGroupTypeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkRenderPassCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkRenderPassCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkRenderingFlagBitsToJson(nlohmann::ordered_json& jdata, const VkRenderingFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkResolveModeFlagBitsToJson(nlohmann::ordered_json& jdata, const VkResolveModeFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkResultToJson(nlohmann::ordered_json& jdata, const VkResult& value, const util::JsonOptions& options = util::JsonOptions());
void VkSampleCountFlagBitsToJson(nlohmann::ordered_json& jdata, const VkSampleCountFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkSamplerAddressModeToJson(nlohmann::ordered_json& jdata, const VkSamplerAddressMode& value, const util::JsonOptions& options = util::JsonOptions());
void VkSamplerCreateFlagBitsToJson(nlohmann::ordered_json& jdata, const VkSamplerCreateFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkSamplerMipmapModeToJson(nlohmann::ordered_json& jdata, const VkSamplerMipmapMode& value, const util::JsonOptions& options = util::JsonOptions());
void VkSamplerReductionModeToJson(nlohmann::ordered_json& jdata, const VkSamplerReductionMode& value, const util::JsonOptions& options = util::JsonOptions());
void VkSamplerYcbcrModelConversionToJson(nlohmann::ordered_json& jdata, const VkSamplerYcbcrModelConversion& value, const util::JsonOptions& options = util::JsonOptions());
void VkSamplerYcbcrRangeToJson(nlohmann::ordered_json& jdata, const VkSamplerYcbcrRange& value, const util::JsonOptions& options = util::JsonOptions());
void VkScopeKHRToJson(nlohmann::ordered_json& jdata, const VkScopeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkSemaphoreImportFlagBitsToJson(nlohmann::ordered_json& jdata, const VkSemaphoreImportFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkSemaphoreTypeToJson(nlohmann::ordered_json& jdata, const VkSemaphoreType& value, const util::JsonOptions& options = util::JsonOptions());
void VkSemaphoreWaitFlagBitsToJson(nlohmann::ordered_json& jdata, const VkSemaphoreWaitFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkShaderCodeTypeEXTToJson(nlohmann::ordered_json& jdata, const VkShaderCodeTypeEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkShaderCorePropertiesFlagBitsAMDToJson(nlohmann::ordered_json& jdata, const VkShaderCorePropertiesFlagBitsAMD& value, const util::JsonOptions& options = util::JsonOptions());
void VkShaderCreateFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkShaderCreateFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkShaderFloatControlsIndependenceToJson(nlohmann::ordered_json& jdata, const VkShaderFloatControlsIndependence& value, const util::JsonOptions& options = util::JsonOptions());
void VkShaderGroupShaderKHRToJson(nlohmann::ordered_json& jdata, const VkShaderGroupShaderKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkShaderInfoTypeAMDToJson(nlohmann::ordered_json& jdata, const VkShaderInfoTypeAMD& value, const util::JsonOptions& options = util::JsonOptions());
void VkShaderStageFlagBitsToJson(nlohmann::ordered_json& jdata, const VkShaderStageFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkShadingRatePaletteEntryNVToJson(nlohmann::ordered_json& jdata, const VkShadingRatePaletteEntryNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkSharingModeToJson(nlohmann::ordered_json& jdata, const VkSharingMode& value, const util::JsonOptions& options = util::JsonOptions());
void VkSparseImageFormatFlagBitsToJson(nlohmann::ordered_json& jdata, const VkSparseImageFormatFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkSparseMemoryBindFlagBitsToJson(nlohmann::ordered_json& jdata, const VkSparseMemoryBindFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkStencilFaceFlagBitsToJson(nlohmann::ordered_json& jdata, const VkStencilFaceFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkStencilOpToJson(nlohmann::ordered_json& jdata, const VkStencilOp& value, const util::JsonOptions& options = util::JsonOptions());
void VkStructureTypeToJson(nlohmann::ordered_json& jdata, const VkStructureType& value, const util::JsonOptions& options = util::JsonOptions());
void VkSubgroupFeatureFlagBitsToJson(nlohmann::ordered_json& jdata, const VkSubgroupFeatureFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkSubmitFlagBitsToJson(nlohmann::ordered_json& jdata, const VkSubmitFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkSubpassContentsToJson(nlohmann::ordered_json& jdata, const VkSubpassContents& value, const util::JsonOptions& options = util::JsonOptions());
void VkSubpassDescriptionFlagBitsToJson(nlohmann::ordered_json& jdata, const VkSubpassDescriptionFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkSubpassMergeStatusEXTToJson(nlohmann::ordered_json& jdata, const VkSubpassMergeStatusEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkSurfaceCounterFlagBitsEXTToJson(nlohmann::ordered_json& jdata, const VkSurfaceCounterFlagBitsEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkSurfaceTransformFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkSurfaceTransformFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkSwapchainCreateFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkSwapchainCreateFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkSystemAllocationScopeToJson(nlohmann::ordered_json& jdata, const VkSystemAllocationScope& value, const util::JsonOptions& options = util::JsonOptions());
void VkTessellationDomainOriginToJson(nlohmann::ordered_json& jdata, const VkTessellationDomainOrigin& value, const util::JsonOptions& options = util::JsonOptions());
void VkTileShadingRenderPassFlagBitsQCOMToJson(nlohmann::ordered_json& jdata, const VkTileShadingRenderPassFlagBitsQCOM& value, const util::JsonOptions& options = util::JsonOptions());
void VkTimeDomainKHRToJson(nlohmann::ordered_json& jdata, const VkTimeDomainKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkToolPurposeFlagBitsToJson(nlohmann::ordered_json& jdata, const VkToolPurposeFlagBits& value, const util::JsonOptions& options = util::JsonOptions());
void VkValidationCacheHeaderVersionEXTToJson(nlohmann::ordered_json& jdata, const VkValidationCacheHeaderVersionEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkValidationCheckEXTToJson(nlohmann::ordered_json& jdata, const VkValidationCheckEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkValidationFeatureDisableEXTToJson(nlohmann::ordered_json& jdata, const VkValidationFeatureDisableEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkValidationFeatureEnableEXTToJson(nlohmann::ordered_json& jdata, const VkValidationFeatureEnableEXT& value, const util::JsonOptions& options = util::JsonOptions());
void VkVendorIdToJson(nlohmann::ordered_json& jdata, const VkVendorId& value, const util::JsonOptions& options = util::JsonOptions());
void VkVertexInputRateToJson(nlohmann::ordered_json& jdata, const VkVertexInputRate& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoCapabilityFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoCapabilityFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoChromaSubsamplingFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoChromaSubsamplingFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoCodecOperationFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoCodecOperationFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoCodingControlFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoCodingControlFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoComponentBitDepthFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoComponentBitDepthFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoDecodeCapabilityFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoDecodeCapabilityFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoDecodeH264PictureLayoutFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoDecodeH264PictureLayoutFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoDecodeUsageFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoDecodeUsageFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1CapabilityFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeAV1CapabilityFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1PredictionModeKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeAV1PredictionModeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1RateControlFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeAV1RateControlFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1RateControlGroupKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeAV1RateControlGroupKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1StdFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeAV1StdFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1SuperblockSizeFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeAV1SuperblockSizeFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeCapabilityFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeCapabilityFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeContentFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeContentFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeFeedbackFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeFeedbackFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH264CapabilityFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeH264CapabilityFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH264RateControlFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeH264RateControlFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH264StdFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeH264StdFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265CapabilityFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeH265CapabilityFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265CtbSizeFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeH265CtbSizeFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265RateControlFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeH265RateControlFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265StdFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeH265StdFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265TransformBlockSizeFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeRateControlModeFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeRateControlModeFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeTuningModeKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeTuningModeKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeUsageFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoEncodeUsageFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoSessionCreateFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoSessionCreateFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkVideoSessionParametersCreateFlagBitsKHRToJson(nlohmann::ordered_json& jdata, const VkVideoSessionParametersCreateFlagBitsKHR& value, const util::JsonOptions& options = util::JsonOptions());
void VkViewportCoordinateSwizzleNVToJson(nlohmann::ordered_json& jdata, const VkViewportCoordinateSwizzleNV& value, const util::JsonOptions& options = util::JsonOptions());
void VkAccelerationStructureCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkAccelerationStructureMotionInfoFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkAccelerationStructureMotionInstanceFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkAccessFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkAccessFlags2ToJson(nlohmann::ordered_json& jdata, const VkFlags64 flags, const util::JsonOptions& options = util::JsonOptions());
void VkAccessFlags3KHRToJson(nlohmann::ordered_json& jdata, const VkFlags64 flags, const util::JsonOptions& options = util::JsonOptions());
void VkAcquireProfilingLockFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkAndroidSurfaceCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkAttachmentDescriptionFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkBufferCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkBufferUsageFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkBufferUsageFlags2ToJson(nlohmann::ordered_json& jdata, const VkFlags64 flags, const util::JsonOptions& options = util::JsonOptions());
void VkBufferViewCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkBuildAccelerationStructureFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkBuildMicromapFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkColorComponentFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkCommandBufferResetFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkCommandBufferUsageFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkCommandPoolCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkCommandPoolResetFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkCommandPoolTrimFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkCompositeAlphaFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkConditionalRenderingFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkCullModeFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDebugReportFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDebugUtilsMessageSeverityFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDebugUtilsMessageTypeFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDebugUtilsMessengerCallbackDataFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDebugUtilsMessengerCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDependencyFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorBindingFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorPoolCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorPoolResetFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorSetLayoutCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDescriptorUpdateTemplateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceAddressBindingFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceDiagnosticsConfigFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceGroupPresentModeFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceMemoryReportFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDeviceQueueCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDirectDriverLoadingFlagsLUNARGToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDirectFBSurfaceCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDisplayModeCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDisplayPlaneAlphaFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkDisplaySurfaceCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkEventCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkExternalFenceFeatureFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkExternalFenceHandleTypeFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkExternalMemoryFeatureFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkExternalMemoryFeatureFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkExternalMemoryHandleTypeFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkExternalMemoryHandleTypeFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkExternalSemaphoreFeatureFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkExternalSemaphoreHandleTypeFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkFenceCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkFenceImportFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkFormatFeatureFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkFormatFeatureFlags2ToJson(nlohmann::ordered_json& jdata, const VkFlags64 flags, const util::JsonOptions& options = util::JsonOptions());
void VkFrameBoundaryFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkFramebufferCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkGeometryFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkGeometryInstanceFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkGraphicsPipelineLibraryFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkHeadlessSurfaceCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkHostImageCopyFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkIOSSurfaceCreateFlagsMVKToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkImageAspectFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkImageCompressionFixedRateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkImageCompressionFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkImageCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkImagePipeSurfaceCreateFlagsFUCHSIAToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkImageUsageFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkImageViewCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectCommandsInputModeFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectCommandsLayoutUsageFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectCommandsLayoutUsageFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkIndirectStateFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkInstanceCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkMacOSSurfaceCreateFlagsMVKToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryAllocateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryHeapFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryMapFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryPropertyFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkMemoryUnmapFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkMetalSurfaceCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkMicromapCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowExecuteFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowGridSizeFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowSessionCreateFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkOpticalFlowUsageFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPartitionedAccelerationStructureInstanceFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPeerMemoryFeatureFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPerformanceCounterDescriptionFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPhysicalDeviceSchedulingControlsFlagsARMToJson(nlohmann::ordered_json& jdata, const VkFlags64 flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCacheCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineColorBlendStateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCompilerControlFlagsAMDToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCoverageModulationStateCreateFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCoverageReductionStateCreateFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCoverageToColorStateCreateFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCreateFlags2ToJson(nlohmann::ordered_json& jdata, const VkFlags64 flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineCreationFeedbackFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineDepthStencilStateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineDiscardRectangleStateCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineDynamicStateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineInputAssemblyStateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineLayoutCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineMultisampleStateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineRasterizationConservativeStateCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineRasterizationDepthClipStateCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineRasterizationStateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineRasterizationStateStreamCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineShaderStageCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineStageFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineStageFlags2ToJson(nlohmann::ordered_json& jdata, const VkFlags64 flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineTessellationStateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineVertexInputStateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineViewportStateCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPipelineViewportSwizzleStateCreateFlagsNVToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPresentGravityFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPresentScalingFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkPrivateDataSlotCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkQueryControlFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkQueryPipelineStatisticFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkQueryPoolCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkQueryResultFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkQueueFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkRenderPassCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkRenderingFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkResolveModeFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSampleCountFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSamplerCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkScreenSurfaceCreateFlagsQNXToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSemaphoreCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSemaphoreImportFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSemaphoreWaitFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkShaderCorePropertiesFlagsAMDToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkShaderCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkShaderModuleCreateFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkShaderStageFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSparseImageFormatFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSparseMemoryBindFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkStencilFaceFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkStreamDescriptorSurfaceCreateFlagsGGPToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSubgroupFeatureFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSubmitFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSubpassDescriptionFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSurfaceCounterFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSurfaceTransformFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkSwapchainCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkTileShadingRenderPassFlagsQCOMToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkToolPurposeFlagsToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkValidationCacheCreateFlagsEXTToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkViSurfaceCreateFlagsNNToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoBeginCodingFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoCapabilityFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoChromaSubsamplingFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoCodecOperationFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoCodingControlFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoComponentBitDepthFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoDecodeCapabilityFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoDecodeFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoDecodeH264PictureLayoutFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoDecodeUsageFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1CapabilityFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1RateControlFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1StdFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeAV1SuperblockSizeFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeCapabilityFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeContentFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeFeedbackFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH264CapabilityFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH264RateControlFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH264StdFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265CapabilityFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265CtbSizeFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265RateControlFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265StdFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeH265TransformBlockSizeFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeRateControlFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeRateControlModeFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEncodeUsageFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoEndCodingFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoSessionCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkVideoSessionParametersCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkWaylandSurfaceCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkWin32SurfaceCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkXcbSurfaceCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());
void VkXlibSurfaceCreateFlagsKHRToJson(nlohmann::ordered_json& jdata, const VkFlags flags, const util::JsonOptions& options = util::JsonOptions());

GFXRECON_END_NAMESPACE(decode)
GFXRECON_END_NAMESPACE(gfxrecon)

#endif // GFXRECON_GENERATED_VULKAN_ENUM_TO_JSON_H
