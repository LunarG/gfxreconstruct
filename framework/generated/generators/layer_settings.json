{
    "file_format_version": "1.1.0",
    "layer_settings": {
        "prefixes": {
            "settings_file_entry_prefix": "lunarg_gfxrecon.",
            "android_property_prefix": "debug.gfxrecon.",
            "desktop_envvar_prefix": "GFXRECON_"
        },
        "settings": [
            {
                "name": "capture_compression_type",
                "type": "STRING",
                "var_name": "settings->trace_settings_.capture_file_options.compression_type",
                "var_type": "format::CompressionType",
                "valid_values": [
                    {
                        "value": "lz4",
                        "result": "format::CompressionType::kLz4",
                        "protect": "ENABLE_LZ4_COMPRESSION",
                        "description" : "LZ4 lossless compression"
                    },
                    {
                        "value": "lz77",
                        "result": "format::CompressionType::kLz77",
                        "protect": "ENABLE_LZ77_COMPRESSION",
                        "description" : "LZ77 lossless compression"
                    },
                    {
                        "value": "none",
                        "result": "format::CompressionType::kNone",
                        "description" : "No compression"
                    }
                ],
                "description": "Define a specific compression type to use when capturing content.",
                "defaults": [ "lz4", "none" ]
            },
            {
                "name": "capture_file",
                "type": "FILE_PATH",
                "var_name": "settings->trace_settings_.capture_file",
                "description": "Overrides the default path and name of the capture file.",
                "defaults": [ "gfxrecon_capture.gfxr" ]
            },
            {
                "name": "capture_file_timestamp",
                "type": "BOOL",
                "var_name": "settings->trace_settings_.time_stamp_file",
                "description": "Indicate if you want the capture file name to include the timestamp at creation time. This is important if your application could generate more than one and would normally clobber the original file's contents.",
                "defaults": [ "true" ]
            },
            {
                "name": "capture_force_flush",
                "type": "BOOL",
                "var_name": "settings->trace_settings_.force_flush",
                "description": "Indicate if you want to flush the contents of the capture file at the end of each generated API Call packet.",
                "defaults": [ "false" ]
            },
            {
                "name": "log_allow_indents",
                "type": "BOOL",
                "var_name": "settings->log_settings_.use_indent",
                "description": "Apply iindent formatting in the strings to attempt to make things easier to read. Although indenting is used in very limited circumstances currently."
            },
            {
                "name": "log_break_on_error",
                "type": "BOOL",
                "var_name": "settings->log_settings_.break_on_error",
                "description": "Force the layer to break if it encounters an error so you can debug it easily."
            },
            {
                "name": "log_detailed",
                "type": "BOOL",
                "var_name": "settings->log_settings_.output_detailed_log_info",
                "description": "Enable detailed logging messages (includes file name and location where triggered from)."
            },
            {
                "name": "log_errors_to_stderr",
                "type": "BOOL",
                "var_name": "settings->log_settings_.output_errors_to_stderr",
                "description": "Redirect errors to stderr instead of stdout when writing to the console."
            },
            {
                "name": "log_file",
                "type": "FILE_PATH",
                "var_name": "settings->log_settings_.file_name",
                "description": "Output all log information to a file in the given location. Can be empty resulting in no log file.  Does not affect console output."
            },
            {
                "name": "log_file_create_new",
                "type": "BOOL",
                "var_name": "settings->log_settings_.create_new",
                "description": "Allow the layer to create a new log file every time it starts, or to append to the existing file."
            },
            {
                "name": "log_file_flush_after_write",
                "type": "BOOL",
                "var_name": "settings->log_settings_.flush_after_write",
                "description": "Flush the log file after every write."
            },
            {
                "name": "log_file_keep_open",
                "type": "BOOL",
                "var_name": "settings->log_settings_.leave_file_open",
                "description": "Keep the log file open between writes, otherwise open and close it every message."
            },
            {
                "name": "log_level",
                "type": "STRING",
                "var_name": "settings->log_settings_.min_severity",
                "var_type": "util::Log::Severity",
                "valid_values": [
                    {
                        "value": "command",
                        "result": "util::Log::Severity::kCommandSeverity",
                        "description" : "Output log messages of all severities including command enter/exit messages"
                    },
                    {
                        "value": "debug",
                        "result": "util::Log::Severity::kDebugSeverity",
                        "description" : "Output log messages of Debug severity or higher"
                    },
                    {
                        "value": "info",
                        "result": "util::Log::Severity::kInfoSeverity",
                        "description" : "Output log messages of Info severity or higher"
                    },
                    {
                        "value": "warning",
                        "result": "util::Log::Severity::kWarningSeverity",
                        "description" : "Output log messages of Warning severity or higher"
                    },
                    {
                        "value": "error",
                        "result": "util::Log::Severity::kErrorSeverity",
                        "description" : "Output log messages of Error severity or higher"
                    },
                    {
                        "value": "fatal",
                        "result": "util::Log::Severity::kFatalSeverity",
                        "description" : "Output only fatal error log messages"
                    }
                ],
                "description": "This option allows you to choose what log level you desire to trigger."
            },
            {
                "name": "log_output_to_console",
                "type": "BOOL",
                "var_name": "settings->log_settings_.write_to_console",
                "description": "Output log messages to the console using stdout (or a platform appropriate version of console output)."
            },
            {
                "name": "log_output_to_os_debug_string",
                "type": "BOOL",
                "var_name": "settings->log_settings_.output_to_os_debug_string",
                "description": "Output log messages to an OS-specific logging mechanism. Currently only works for Windows, but allows debug messages to re-direct from the console to `OutputDebugStringA`."
            },
            {
                "name": "memory_tracking_mode",
                "type": "STRING",
                "var_name": "settings->trace_settings_.memory_tracking_mode",
                "var_type": "CaptureSettings::MemoryTrackingMode",
                "valid_values": [
                    {
                        "value": "unassisted",
                        "result": "CaptureSettings::MemoryTrackingMode::kUnassisted",
                        "description": "Assumes the application does not flush, so writes all mapped data on an `vkUnmapMemory` or `vkQueueSubmit` call."
                    },
                    {
                        "value": "assisted",
                        "result": "CaptureSettings::MemoryTrackingMode::kAssisted",
                        "description": "Assumes the application will always flush after writing to mapped memory, so will only write on a flush."
                    },
                    {
                        "value": "page_guard",
                        "result": "CaptureSettings::MemoryTrackingMode::kPageGuard",
                        "description": "Determine which regions of memory to write on an `vkUnmapMemory` or `vkQueueSubmit` call and shadows uncached memory so as to properly provide all memory it can."
                    }
                ],
                "description": "Define the memory tracking mode the layer uses when handling memory.",
                "defaults": [ "page_guard" ]
            }
        ]
    }
}