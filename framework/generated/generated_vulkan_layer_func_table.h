/*
** Copyright (c) 2018-2023 Valve Corporation
** Copyright (c) 2018-2023 LunarG, Inc.
** Copyright (c) 2023 Advanced Micro Devices, Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and associated documentation files (the "Software"),
** to deal in the Software without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Software, and to permit persons to whom the
** Software is furnished to do so, subject to the following conditions:
**
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
*/

/*
** This file is generated from the Khronos Vulkan XML API Registry.
**
*/

#ifndef  GFXRECON_GENERATED_VULKAN_LAYER_FUNC_TABLE_H
#define  GFXRECON_GENERATED_VULKAN_LAYER_FUNC_TABLE_H

#include "encode/custom_vulkan_api_call_encoders.h"
#include "generated/generated_vulkan_api_call_encoders.h"
#include "layer/trace_layer.h"
#include "util/defines.h"

#include "vulkan/vulkan.h"
#include "vk_video/vulkan_video_codec_h264std.h"
#include "vk_video/vulkan_video_codec_h264std_decode.h"
#include "vk_video/vulkan_video_codec_h264std_encode.h"
#include "vk_video/vulkan_video_codec_h265std.h"
#include "vk_video/vulkan_video_codec_h265std_decode.h"
#include "vk_video/vulkan_video_codec_h265std_encode.h"
#include "vk_video/vulkan_video_codecs_common.h"

#include <unordered_map>

GFXRECON_BEGIN_NAMESPACE(gfxrecon)

const std::unordered_map<std::string, PFN_vkVoidFunction> vulkan_func_table = {
    { "CreateInstance",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateInstance) },
    { "DestroyInstance",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyInstance) },
    { "EnumeratePhysicalDevices",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkEnumeratePhysicalDevices) },
    { "GetPhysicalDeviceFeatures",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceFeatures) },
    { "GetPhysicalDeviceFormatProperties",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceFormatProperties) },
    { "GetPhysicalDeviceImageFormatProperties",                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceImageFormatProperties) },
    { "GetPhysicalDeviceProperties",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceProperties) },
    { "GetPhysicalDeviceQueueFamilyProperties",                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceQueueFamilyProperties) },
    { "GetPhysicalDeviceMemoryProperties",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceMemoryProperties) },
    { "GetInstanceProcAddr",                                                                               reinterpret_cast<PFN_vkVoidFunction>(vulkan_entry::GetInstanceProcAddr) },
    { "GetDeviceProcAddr",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(vulkan_entry::GetDeviceProcAddr) },
    { "CreateDevice",                                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDevice) },
    { "DestroyDevice",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyDevice) },
    { "EnumerateInstanceExtensionProperties",                                                              reinterpret_cast<PFN_vkVoidFunction>(vulkan_entry::EnumerateInstanceExtensionProperties) },
    { "EnumerateDeviceExtensionProperties",                                                                reinterpret_cast<PFN_vkVoidFunction>(vulkan_entry::EnumerateDeviceExtensionProperties) },
    { "EnumerateInstanceLayerProperties",                                                                  reinterpret_cast<PFN_vkVoidFunction>(vulkan_entry::EnumerateInstanceLayerProperties) },
    { "EnumerateDeviceLayerProperties",                                                                    reinterpret_cast<PFN_vkVoidFunction>(vulkan_entry::EnumerateDeviceLayerProperties) },
    { "GetDeviceQueue",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceQueue) },
    { "QueueSubmit",                                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueSubmit) },
    { "QueueWaitIdle",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueWaitIdle) },
    { "DeviceWaitIdle",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkDeviceWaitIdle) },
    { "AllocateMemory",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkAllocateMemory) },
    { "FreeMemory",                                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkFreeMemory) },
    { "MapMemory",                                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkMapMemory) },
    { "UnmapMemory",                                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkUnmapMemory) },
    { "FlushMappedMemoryRanges",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkFlushMappedMemoryRanges) },
    { "InvalidateMappedMemoryRanges",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkInvalidateMappedMemoryRanges) },
    { "GetDeviceMemoryCommitment",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceMemoryCommitment) },
    { "BindBufferMemory",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkBindBufferMemory) },
    { "BindImageMemory",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkBindImageMemory) },
    { "GetBufferMemoryRequirements",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetBufferMemoryRequirements) },
    { "GetImageMemoryRequirements",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageMemoryRequirements) },
    { "GetImageSparseMemoryRequirements",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageSparseMemoryRequirements) },
    { "GetPhysicalDeviceSparseImageFormatProperties",                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSparseImageFormatProperties) },
    { "QueueBindSparse",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueBindSparse) },
    { "CreateFence",                                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateFence) },
    { "DestroyFence",                                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyFence) },
    { "ResetFences",                                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkResetFences) },
    { "GetFenceStatus",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetFenceStatus) },
    { "WaitForFences",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkWaitForFences) },
    { "CreateSemaphore",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateSemaphore) },
    { "DestroySemaphore",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroySemaphore) },
    { "CreateEvent",                                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateEvent) },
    { "DestroyEvent",                                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyEvent) },
    { "GetEventStatus",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetEventStatus) },
    { "SetEvent",                                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetEvent) },
    { "ResetEvent",                                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkResetEvent) },
    { "CreateQueryPool",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateQueryPool) },
    { "DestroyQueryPool",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyQueryPool) },
    { "GetQueryPoolResults",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetQueryPoolResults) },
    { "CreateBuffer",                                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateBuffer) },
    { "DestroyBuffer",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyBuffer) },
    { "CreateBufferView",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateBufferView) },
    { "DestroyBufferView",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyBufferView) },
    { "CreateImage",                                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateImage) },
    { "DestroyImage",                                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyImage) },
    { "GetImageSubresourceLayout",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageSubresourceLayout) },
    { "CreateImageView",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateImageView) },
    { "DestroyImageView",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyImageView) },
    { "CreateShaderModule",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateShaderModule) },
    { "DestroyShaderModule",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyShaderModule) },
    { "CreatePipelineCache",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreatePipelineCache) },
    { "DestroyPipelineCache",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyPipelineCache) },
    { "GetPipelineCacheData",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPipelineCacheData) },
    { "MergePipelineCaches",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkMergePipelineCaches) },
    { "CreateGraphicsPipelines",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateGraphicsPipelines) },
    { "CreateComputePipelines",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateComputePipelines) },
    { "DestroyPipeline",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyPipeline) },
    { "CreatePipelineLayout",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreatePipelineLayout) },
    { "DestroyPipelineLayout",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyPipelineLayout) },
    { "CreateSampler",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateSampler) },
    { "DestroySampler",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroySampler) },
    { "CreateDescriptorSetLayout",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDescriptorSetLayout) },
    { "DestroyDescriptorSetLayout",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyDescriptorSetLayout) },
    { "CreateDescriptorPool",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDescriptorPool) },
    { "DestroyDescriptorPool",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyDescriptorPool) },
    { "ResetDescriptorPool",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkResetDescriptorPool) },
    { "AllocateDescriptorSets",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkAllocateDescriptorSets) },
    { "FreeDescriptorSets",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkFreeDescriptorSets) },
    { "UpdateDescriptorSets",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkUpdateDescriptorSets) },
    { "CreateFramebuffer",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateFramebuffer) },
    { "DestroyFramebuffer",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyFramebuffer) },
    { "CreateRenderPass",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateRenderPass) },
    { "DestroyRenderPass",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyRenderPass) },
    { "GetRenderAreaGranularity",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetRenderAreaGranularity) },
    { "CreateCommandPool",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateCommandPool) },
    { "DestroyCommandPool",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyCommandPool) },
    { "ResetCommandPool",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkResetCommandPool) },
    { "AllocateCommandBuffers",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkAllocateCommandBuffers) },
    { "FreeCommandBuffers",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkFreeCommandBuffers) },
    { "BeginCommandBuffer",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkBeginCommandBuffer) },
    { "EndCommandBuffer",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkEndCommandBuffer) },
    { "ResetCommandBuffer",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkResetCommandBuffer) },
    { "CmdBindPipeline",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindPipeline) },
    { "CmdSetViewport",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetViewport) },
    { "CmdSetScissor",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetScissor) },
    { "CmdSetLineWidth",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetLineWidth) },
    { "CmdSetDepthBias",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthBias) },
    { "CmdSetBlendConstants",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetBlendConstants) },
    { "CmdSetDepthBounds",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthBounds) },
    { "CmdSetStencilCompareMask",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetStencilCompareMask) },
    { "CmdSetStencilWriteMask",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetStencilWriteMask) },
    { "CmdSetStencilReference",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetStencilReference) },
    { "CmdBindDescriptorSets",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindDescriptorSets) },
    { "CmdBindIndexBuffer",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindIndexBuffer) },
    { "CmdBindVertexBuffers",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindVertexBuffers) },
    { "CmdDraw",                                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDraw) },
    { "CmdDrawIndexed",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndexed) },
    { "CmdDrawIndirect",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndirect) },
    { "CmdDrawIndexedIndirect",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndexedIndirect) },
    { "CmdDispatch",                                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDispatch) },
    { "CmdDispatchIndirect",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDispatchIndirect) },
    { "CmdCopyBuffer",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyBuffer) },
    { "CmdCopyImage",                                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyImage) },
    { "CmdBlitImage",                                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBlitImage) },
    { "CmdCopyBufferToImage",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyBufferToImage) },
    { "CmdCopyImageToBuffer",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyImageToBuffer) },
    { "CmdUpdateBuffer",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdUpdateBuffer) },
    { "CmdFillBuffer",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdFillBuffer) },
    { "CmdClearColorImage",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdClearColorImage) },
    { "CmdClearDepthStencilImage",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdClearDepthStencilImage) },
    { "CmdClearAttachments",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdClearAttachments) },
    { "CmdResolveImage",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdResolveImage) },
    { "CmdSetEvent",                                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetEvent) },
    { "CmdResetEvent",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdResetEvent) },
    { "CmdWaitEvents",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWaitEvents) },
    { "CmdPipelineBarrier",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPipelineBarrier) },
    { "CmdBeginQuery",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginQuery) },
    { "CmdEndQuery",                                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndQuery) },
    { "CmdResetQueryPool",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdResetQueryPool) },
    { "CmdWriteTimestamp",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWriteTimestamp) },
    { "CmdCopyQueryPoolResults",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyQueryPoolResults) },
    { "CmdPushConstants",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPushConstants) },
    { "CmdBeginRenderPass",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginRenderPass) },
    { "CmdNextSubpass",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdNextSubpass) },
    { "CmdEndRenderPass",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndRenderPass) },
    { "CmdExecuteCommands",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdExecuteCommands) },
    { "BindBufferMemory2",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkBindBufferMemory2) },
    { "BindImageMemory2",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkBindImageMemory2) },
    { "GetDeviceGroupPeerMemoryFeatures",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceGroupPeerMemoryFeatures) },
    { "CmdSetDeviceMask",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDeviceMask) },
    { "CmdDispatchBase",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDispatchBase) },
    { "EnumeratePhysicalDeviceGroups",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkEnumeratePhysicalDeviceGroups) },
    { "GetImageMemoryRequirements2",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageMemoryRequirements2) },
    { "GetBufferMemoryRequirements2",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetBufferMemoryRequirements2) },
    { "GetImageSparseMemoryRequirements2",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageSparseMemoryRequirements2) },
    { "GetPhysicalDeviceFeatures2",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceFeatures2) },
    { "GetPhysicalDeviceProperties2",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceProperties2) },
    { "GetPhysicalDeviceFormatProperties2",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceFormatProperties2) },
    { "GetPhysicalDeviceImageFormatProperties2",                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceImageFormatProperties2) },
    { "GetPhysicalDeviceQueueFamilyProperties2",                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceQueueFamilyProperties2) },
    { "GetPhysicalDeviceMemoryProperties2",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceMemoryProperties2) },
    { "GetPhysicalDeviceSparseImageFormatProperties2",                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSparseImageFormatProperties2) },
    { "TrimCommandPool",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkTrimCommandPool) },
    { "GetDeviceQueue2",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceQueue2) },
    { "CreateSamplerYcbcrConversion",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateSamplerYcbcrConversion) },
    { "DestroySamplerYcbcrConversion",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroySamplerYcbcrConversion) },
    { "CreateDescriptorUpdateTemplate",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDescriptorUpdateTemplate) },
    { "DestroyDescriptorUpdateTemplate",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyDescriptorUpdateTemplate) },
    { "UpdateDescriptorSetWithTemplate",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkUpdateDescriptorSetWithTemplate) },
    { "GetPhysicalDeviceExternalBufferProperties",                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceExternalBufferProperties) },
    { "GetPhysicalDeviceExternalFenceProperties",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceExternalFenceProperties) },
    { "GetPhysicalDeviceExternalSemaphoreProperties",                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceExternalSemaphoreProperties) },
    { "GetDescriptorSetLayoutSupport",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDescriptorSetLayoutSupport) },
    { "CmdDrawIndirectCount",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndirectCount) },
    { "CmdDrawIndexedIndirectCount",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndexedIndirectCount) },
    { "CreateRenderPass2",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateRenderPass2) },
    { "CmdBeginRenderPass2",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginRenderPass2) },
    { "CmdNextSubpass2",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdNextSubpass2) },
    { "CmdEndRenderPass2",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndRenderPass2) },
    { "ResetQueryPool",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkResetQueryPool) },
    { "GetSemaphoreCounterValue",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetSemaphoreCounterValue) },
    { "WaitSemaphores",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkWaitSemaphores) },
    { "SignalSemaphore",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkSignalSemaphore) },
    { "GetBufferDeviceAddress",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetBufferDeviceAddress) },
    { "GetBufferOpaqueCaptureAddress",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetBufferOpaqueCaptureAddress) },
    { "GetDeviceMemoryOpaqueCaptureAddress",                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceMemoryOpaqueCaptureAddress) },
    { "GetPhysicalDeviceToolProperties",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceToolProperties) },
    { "CreatePrivateDataSlot",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreatePrivateDataSlot) },
    { "DestroyPrivateDataSlot",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyPrivateDataSlot) },
    { "SetPrivateData",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetPrivateData) },
    { "GetPrivateData",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPrivateData) },
    { "CmdSetEvent2",                                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetEvent2) },
    { "CmdResetEvent2",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdResetEvent2) },
    { "CmdWaitEvents2",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWaitEvents2) },
    { "CmdPipelineBarrier2",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPipelineBarrier2) },
    { "CmdWriteTimestamp2",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWriteTimestamp2) },
    { "QueueSubmit2",                                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueSubmit2) },
    { "CmdCopyBuffer2",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyBuffer2) },
    { "CmdCopyImage2",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyImage2) },
    { "CmdCopyBufferToImage2",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyBufferToImage2) },
    { "CmdCopyImageToBuffer2",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyImageToBuffer2) },
    { "CmdBlitImage2",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBlitImage2) },
    { "CmdResolveImage2",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdResolveImage2) },
    { "CmdBeginRendering",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginRendering) },
    { "CmdEndRendering",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndRendering) },
    { "CmdSetCullMode",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCullMode) },
    { "CmdSetFrontFace",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetFrontFace) },
    { "CmdSetPrimitiveTopology",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetPrimitiveTopology) },
    { "CmdSetViewportWithCount",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetViewportWithCount) },
    { "CmdSetScissorWithCount",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetScissorWithCount) },
    { "CmdBindVertexBuffers2",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindVertexBuffers2) },
    { "CmdSetDepthTestEnable",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthTestEnable) },
    { "CmdSetDepthWriteEnable",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthWriteEnable) },
    { "CmdSetDepthCompareOp",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthCompareOp) },
    { "CmdSetDepthBoundsTestEnable",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthBoundsTestEnable) },
    { "CmdSetStencilTestEnable",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetStencilTestEnable) },
    { "CmdSetStencilOp",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetStencilOp) },
    { "CmdSetRasterizerDiscardEnable",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetRasterizerDiscardEnable) },
    { "CmdSetDepthBiasEnable",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthBiasEnable) },
    { "CmdSetPrimitiveRestartEnable",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetPrimitiveRestartEnable) },
    { "GetDeviceBufferMemoryRequirements",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceBufferMemoryRequirements) },
    { "GetDeviceImageMemoryRequirements",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceImageMemoryRequirements) },
    { "GetDeviceImageSparseMemoryRequirements",                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceImageSparseMemoryRequirements) },
    { "DestroySurfaceKHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroySurfaceKHR) },
    { "GetPhysicalDeviceSurfaceSupportKHR",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSurfaceSupportKHR) },
    { "GetPhysicalDeviceSurfaceCapabilitiesKHR",                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSurfaceCapabilitiesKHR) },
    { "GetPhysicalDeviceSurfaceFormatsKHR",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSurfaceFormatsKHR) },
    { "GetPhysicalDeviceSurfacePresentModesKHR",                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSurfacePresentModesKHR) },
    { "CreateSwapchainKHR",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateSwapchainKHR) },
    { "DestroySwapchainKHR",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroySwapchainKHR) },
    { "GetSwapchainImagesKHR",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetSwapchainImagesKHR) },
    { "AcquireNextImageKHR",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkAcquireNextImageKHR) },
    { "QueuePresentKHR",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueuePresentKHR) },
    { "GetDeviceGroupPresentCapabilitiesKHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceGroupPresentCapabilitiesKHR) },
    { "GetDeviceGroupSurfacePresentModesKHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceGroupSurfacePresentModesKHR) },
    { "GetPhysicalDevicePresentRectanglesKHR",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDevicePresentRectanglesKHR) },
    { "AcquireNextImage2KHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkAcquireNextImage2KHR) },
    { "GetPhysicalDeviceDisplayPropertiesKHR",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceDisplayPropertiesKHR) },
    { "GetPhysicalDeviceDisplayPlanePropertiesKHR",                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceDisplayPlanePropertiesKHR) },
    { "GetDisplayPlaneSupportedDisplaysKHR",                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDisplayPlaneSupportedDisplaysKHR) },
    { "GetDisplayModePropertiesKHR",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDisplayModePropertiesKHR) },
    { "CreateDisplayModeKHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDisplayModeKHR) },
    { "GetDisplayPlaneCapabilitiesKHR",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDisplayPlaneCapabilitiesKHR) },
    { "CreateDisplayPlaneSurfaceKHR",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDisplayPlaneSurfaceKHR) },
    { "CreateSharedSwapchainsKHR",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateSharedSwapchainsKHR) },
    { "CreateXlibSurfaceKHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateXlibSurfaceKHR) },
    { "GetPhysicalDeviceXlibPresentationSupportKHR",                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceXlibPresentationSupportKHR) },
    { "CreateXcbSurfaceKHR",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateXcbSurfaceKHR) },
    { "GetPhysicalDeviceXcbPresentationSupportKHR",                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceXcbPresentationSupportKHR) },
    { "CreateWaylandSurfaceKHR",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateWaylandSurfaceKHR) },
    { "GetPhysicalDeviceWaylandPresentationSupportKHR",                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceWaylandPresentationSupportKHR) },
    { "CreateAndroidSurfaceKHR",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateAndroidSurfaceKHR) },
    { "CreateWin32SurfaceKHR",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateWin32SurfaceKHR) },
    { "GetPhysicalDeviceWin32PresentationSupportKHR",                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceWin32PresentationSupportKHR) },
    { "GetPhysicalDeviceVideoCapabilitiesKHR",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceVideoCapabilitiesKHR) },
    { "GetPhysicalDeviceVideoFormatPropertiesKHR",                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceVideoFormatPropertiesKHR) },
    { "CreateVideoSessionKHR",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateVideoSessionKHR) },
    { "DestroyVideoSessionKHR",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyVideoSessionKHR) },
    { "GetVideoSessionMemoryRequirementsKHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetVideoSessionMemoryRequirementsKHR) },
    { "BindVideoSessionMemoryKHR",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkBindVideoSessionMemoryKHR) },
    { "CreateVideoSessionParametersKHR",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateVideoSessionParametersKHR) },
    { "UpdateVideoSessionParametersKHR",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkUpdateVideoSessionParametersKHR) },
    { "DestroyVideoSessionParametersKHR",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyVideoSessionParametersKHR) },
    { "CmdBeginVideoCodingKHR",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginVideoCodingKHR) },
    { "CmdEndVideoCodingKHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndVideoCodingKHR) },
    { "CmdControlVideoCodingKHR",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdControlVideoCodingKHR) },
    { "CmdDecodeVideoKHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDecodeVideoKHR) },
    { "CmdBeginRenderingKHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginRenderingKHR) },
    { "CmdEndRenderingKHR",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndRenderingKHR) },
    { "GetPhysicalDeviceFeatures2KHR",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceFeatures2KHR) },
    { "GetPhysicalDeviceProperties2KHR",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceProperties2KHR) },
    { "GetPhysicalDeviceFormatProperties2KHR",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceFormatProperties2KHR) },
    { "GetPhysicalDeviceImageFormatProperties2KHR",                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceImageFormatProperties2KHR) },
    { "GetPhysicalDeviceQueueFamilyProperties2KHR",                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceQueueFamilyProperties2KHR) },
    { "GetPhysicalDeviceMemoryProperties2KHR",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceMemoryProperties2KHR) },
    { "GetPhysicalDeviceSparseImageFormatProperties2KHR",                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSparseImageFormatProperties2KHR) },
    { "GetDeviceGroupPeerMemoryFeaturesKHR",                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceGroupPeerMemoryFeaturesKHR) },
    { "CmdSetDeviceMaskKHR",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDeviceMaskKHR) },
    { "CmdDispatchBaseKHR",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDispatchBaseKHR) },
    { "TrimCommandPoolKHR",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkTrimCommandPoolKHR) },
    { "EnumeratePhysicalDeviceGroupsKHR",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkEnumeratePhysicalDeviceGroupsKHR) },
    { "GetPhysicalDeviceExternalBufferPropertiesKHR",                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceExternalBufferPropertiesKHR) },
    { "GetMemoryWin32HandleKHR",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryWin32HandleKHR) },
    { "GetMemoryWin32HandlePropertiesKHR",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryWin32HandlePropertiesKHR) },
    { "GetMemoryFdKHR",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryFdKHR) },
    { "GetMemoryFdPropertiesKHR",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryFdPropertiesKHR) },
    { "GetPhysicalDeviceExternalSemaphorePropertiesKHR",                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) },
    { "ImportSemaphoreWin32HandleKHR",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkImportSemaphoreWin32HandleKHR) },
    { "GetSemaphoreWin32HandleKHR",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetSemaphoreWin32HandleKHR) },
    { "ImportSemaphoreFdKHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkImportSemaphoreFdKHR) },
    { "GetSemaphoreFdKHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetSemaphoreFdKHR) },
    { "CmdPushDescriptorSetKHR",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPushDescriptorSetKHR) },
    { "CmdPushDescriptorSetWithTemplateKHR",                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPushDescriptorSetWithTemplateKHR) },
    { "CreateDescriptorUpdateTemplateKHR",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDescriptorUpdateTemplateKHR) },
    { "DestroyDescriptorUpdateTemplateKHR",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyDescriptorUpdateTemplateKHR) },
    { "UpdateDescriptorSetWithTemplateKHR",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkUpdateDescriptorSetWithTemplateKHR) },
    { "CreateRenderPass2KHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateRenderPass2KHR) },
    { "CmdBeginRenderPass2KHR",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginRenderPass2KHR) },
    { "CmdNextSubpass2KHR",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdNextSubpass2KHR) },
    { "CmdEndRenderPass2KHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndRenderPass2KHR) },
    { "GetSwapchainStatusKHR",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetSwapchainStatusKHR) },
    { "GetPhysicalDeviceExternalFencePropertiesKHR",                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceExternalFencePropertiesKHR) },
    { "ImportFenceWin32HandleKHR",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkImportFenceWin32HandleKHR) },
    { "GetFenceWin32HandleKHR",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetFenceWin32HandleKHR) },
    { "ImportFenceFdKHR",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkImportFenceFdKHR) },
    { "GetFenceFdKHR",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetFenceFdKHR) },
    { "EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR",                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR) },
    { "GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR",                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR) },
    { "AcquireProfilingLockKHR",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkAcquireProfilingLockKHR) },
    { "ReleaseProfilingLockKHR",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkReleaseProfilingLockKHR) },
    { "GetPhysicalDeviceSurfaceCapabilities2KHR",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSurfaceCapabilities2KHR) },
    { "GetPhysicalDeviceSurfaceFormats2KHR",                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSurfaceFormats2KHR) },
    { "GetPhysicalDeviceDisplayProperties2KHR",                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceDisplayProperties2KHR) },
    { "GetPhysicalDeviceDisplayPlaneProperties2KHR",                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceDisplayPlaneProperties2KHR) },
    { "GetDisplayModeProperties2KHR",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDisplayModeProperties2KHR) },
    { "GetDisplayPlaneCapabilities2KHR",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDisplayPlaneCapabilities2KHR) },
    { "GetImageMemoryRequirements2KHR",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageMemoryRequirements2KHR) },
    { "GetBufferMemoryRequirements2KHR",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetBufferMemoryRequirements2KHR) },
    { "GetImageSparseMemoryRequirements2KHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageSparseMemoryRequirements2KHR) },
    { "CreateSamplerYcbcrConversionKHR",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateSamplerYcbcrConversionKHR) },
    { "DestroySamplerYcbcrConversionKHR",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroySamplerYcbcrConversionKHR) },
    { "BindBufferMemory2KHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkBindBufferMemory2KHR) },
    { "BindImageMemory2KHR",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkBindImageMemory2KHR) },
    { "GetDescriptorSetLayoutSupportKHR",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDescriptorSetLayoutSupportKHR) },
    { "CmdDrawIndirectCountKHR",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndirectCountKHR) },
    { "CmdDrawIndexedIndirectCountKHR",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndexedIndirectCountKHR) },
    { "GetSemaphoreCounterValueKHR",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetSemaphoreCounterValueKHR) },
    { "WaitSemaphoresKHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkWaitSemaphoresKHR) },
    { "SignalSemaphoreKHR",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkSignalSemaphoreKHR) },
    { "GetPhysicalDeviceFragmentShadingRatesKHR",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceFragmentShadingRatesKHR) },
    { "CmdSetFragmentShadingRateKHR",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetFragmentShadingRateKHR) },
    { "CmdSetRenderingAttachmentLocationsKHR",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetRenderingAttachmentLocationsKHR) },
    { "CmdSetRenderingInputAttachmentIndicesKHR",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetRenderingInputAttachmentIndicesKHR) },
    { "WaitForPresentKHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkWaitForPresentKHR) },
    { "GetBufferDeviceAddressKHR",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetBufferDeviceAddressKHR) },
    { "GetBufferOpaqueCaptureAddressKHR",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetBufferOpaqueCaptureAddressKHR) },
    { "GetDeviceMemoryOpaqueCaptureAddressKHR",                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceMemoryOpaqueCaptureAddressKHR) },
    { "CreateDeferredOperationKHR",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDeferredOperationKHR) },
    { "DestroyDeferredOperationKHR",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyDeferredOperationKHR) },
    { "GetDeferredOperationMaxConcurrencyKHR",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeferredOperationMaxConcurrencyKHR) },
    { "GetDeferredOperationResultKHR",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeferredOperationResultKHR) },
    { "DeferredOperationJoinKHR",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkDeferredOperationJoinKHR) },
    { "GetPipelineExecutablePropertiesKHR",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPipelineExecutablePropertiesKHR) },
    { "GetPipelineExecutableStatisticsKHR",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPipelineExecutableStatisticsKHR) },
    { "GetPipelineExecutableInternalRepresentationsKHR",                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPipelineExecutableInternalRepresentationsKHR) },
    { "MapMemory2KHR",                                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkMapMemory2KHR) },
    { "UnmapMemory2KHR",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkUnmapMemory2KHR) },
    { "GetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR",                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR) },
    { "GetEncodedVideoSessionParametersKHR",                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetEncodedVideoSessionParametersKHR) },
    { "CmdEncodeVideoKHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEncodeVideoKHR) },
    { "CmdSetEvent2KHR",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetEvent2KHR) },
    { "CmdResetEvent2KHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdResetEvent2KHR) },
    { "CmdWaitEvents2KHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWaitEvents2KHR) },
    { "CmdPipelineBarrier2KHR",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPipelineBarrier2KHR) },
    { "CmdWriteTimestamp2KHR",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWriteTimestamp2KHR) },
    { "QueueSubmit2KHR",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueSubmit2KHR) },
    { "CmdWriteBufferMarker2AMD",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWriteBufferMarker2AMD) },
    { "GetQueueCheckpointData2NV",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetQueueCheckpointData2NV) },
    { "CmdCopyBuffer2KHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyBuffer2KHR) },
    { "CmdCopyImage2KHR",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyImage2KHR) },
    { "CmdCopyBufferToImage2KHR",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyBufferToImage2KHR) },
    { "CmdCopyImageToBuffer2KHR",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyImageToBuffer2KHR) },
    { "CmdBlitImage2KHR",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBlitImage2KHR) },
    { "CmdResolveImage2KHR",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdResolveImage2KHR) },
    { "CmdTraceRaysIndirect2KHR",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdTraceRaysIndirect2KHR) },
    { "GetDeviceBufferMemoryRequirementsKHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceBufferMemoryRequirementsKHR) },
    { "GetDeviceImageMemoryRequirementsKHR",                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceImageMemoryRequirementsKHR) },
    { "GetDeviceImageSparseMemoryRequirementsKHR",                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceImageSparseMemoryRequirementsKHR) },
    { "CmdBindIndexBuffer2KHR",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindIndexBuffer2KHR) },
    { "GetRenderingAreaGranularityKHR",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetRenderingAreaGranularityKHR) },
    { "GetDeviceImageSubresourceLayoutKHR",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceImageSubresourceLayoutKHR) },
    { "GetImageSubresourceLayout2KHR",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageSubresourceLayout2KHR) },
    { "CreatePipelineBinariesKHR",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreatePipelineBinariesKHR) },
    { "DestroyPipelineBinaryKHR",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyPipelineBinaryKHR) },
    { "GetPipelineKeyKHR",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPipelineKeyKHR) },
    { "GetPipelineBinaryDataKHR",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPipelineBinaryDataKHR) },
    { "ReleaseCapturedPipelineDataKHR",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkReleaseCapturedPipelineDataKHR) },
    { "GetPhysicalDeviceCooperativeMatrixPropertiesKHR",                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR) },
    { "CmdSetLineStippleKHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetLineStippleKHR) },
    { "GetPhysicalDeviceCalibrateableTimeDomainsKHR",                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceCalibrateableTimeDomainsKHR) },
    { "GetCalibratedTimestampsKHR",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetCalibratedTimestampsKHR) },
    { "CmdBindDescriptorSets2KHR",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindDescriptorSets2KHR) },
    { "CmdPushConstants2KHR",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPushConstants2KHR) },
    { "CmdPushDescriptorSet2KHR",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPushDescriptorSet2KHR) },
    { "CmdPushDescriptorSetWithTemplate2KHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPushDescriptorSetWithTemplate2KHR) },
    { "CmdSetDescriptorBufferOffsets2EXT",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDescriptorBufferOffsets2EXT) },
    { "CmdBindDescriptorBufferEmbeddedSamplers2EXT",                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindDescriptorBufferEmbeddedSamplers2EXT) },
    { "FrameBoundaryANDROID",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkFrameBoundaryANDROID) },
    { "CreateDebugReportCallbackEXT",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDebugReportCallbackEXT) },
    { "DestroyDebugReportCallbackEXT",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyDebugReportCallbackEXT) },
    { "DebugReportMessageEXT",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkDebugReportMessageEXT) },
    { "DebugMarkerSetObjectTagEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkDebugMarkerSetObjectTagEXT) },
    { "DebugMarkerSetObjectNameEXT",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkDebugMarkerSetObjectNameEXT) },
    { "CmdDebugMarkerBeginEXT",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDebugMarkerBeginEXT) },
    { "CmdDebugMarkerEndEXT",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDebugMarkerEndEXT) },
    { "CmdDebugMarkerInsertEXT",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDebugMarkerInsertEXT) },
    { "CmdBindTransformFeedbackBuffersEXT",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindTransformFeedbackBuffersEXT) },
    { "CmdBeginTransformFeedbackEXT",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginTransformFeedbackEXT) },
    { "CmdEndTransformFeedbackEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndTransformFeedbackEXT) },
    { "CmdBeginQueryIndexedEXT",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginQueryIndexedEXT) },
    { "CmdEndQueryIndexedEXT",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndQueryIndexedEXT) },
    { "CmdDrawIndirectByteCountEXT",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndirectByteCountEXT) },
    { "GetImageViewHandleNVX",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageViewHandleNVX) },
    { "GetImageViewAddressNVX",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageViewAddressNVX) },
    { "CmdDrawIndirectCountAMD",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndirectCountAMD) },
    { "CmdDrawIndexedIndirectCountAMD",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawIndexedIndirectCountAMD) },
    { "GetShaderInfoAMD",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetShaderInfoAMD) },
    { "CreateStreamDescriptorSurfaceGGP",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateStreamDescriptorSurfaceGGP) },
    { "GetPhysicalDeviceExternalImageFormatPropertiesNV",                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceExternalImageFormatPropertiesNV) },
    { "GetMemoryWin32HandleNV",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryWin32HandleNV) },
    { "CreateViSurfaceNN",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateViSurfaceNN) },
    { "CmdBeginConditionalRenderingEXT",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginConditionalRenderingEXT) },
    { "CmdEndConditionalRenderingEXT",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndConditionalRenderingEXT) },
    { "CmdSetViewportWScalingNV",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetViewportWScalingNV) },
    { "ReleaseDisplayEXT",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkReleaseDisplayEXT) },
    { "AcquireXlibDisplayEXT",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkAcquireXlibDisplayEXT) },
    { "GetRandROutputDisplayEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetRandROutputDisplayEXT) },
    { "GetPhysicalDeviceSurfaceCapabilities2EXT",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSurfaceCapabilities2EXT) },
    { "DisplayPowerControlEXT",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkDisplayPowerControlEXT) },
    { "RegisterDeviceEventEXT",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkRegisterDeviceEventEXT) },
    { "RegisterDisplayEventEXT",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkRegisterDisplayEventEXT) },
    { "GetSwapchainCounterEXT",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetSwapchainCounterEXT) },
    { "GetRefreshCycleDurationGOOGLE",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetRefreshCycleDurationGOOGLE) },
    { "GetPastPresentationTimingGOOGLE",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPastPresentationTimingGOOGLE) },
    { "CmdSetDiscardRectangleEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDiscardRectangleEXT) },
    { "CmdSetDiscardRectangleEnableEXT",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDiscardRectangleEnableEXT) },
    { "CmdSetDiscardRectangleModeEXT",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDiscardRectangleModeEXT) },
    { "SetHdrMetadataEXT",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetHdrMetadataEXT) },
    { "CreateIOSSurfaceMVK",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateIOSSurfaceMVK) },
    { "CreateMacOSSurfaceMVK",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateMacOSSurfaceMVK) },
    { "SetDebugUtilsObjectNameEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetDebugUtilsObjectNameEXT) },
    { "SetDebugUtilsObjectTagEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetDebugUtilsObjectTagEXT) },
    { "QueueBeginDebugUtilsLabelEXT",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueBeginDebugUtilsLabelEXT) },
    { "QueueEndDebugUtilsLabelEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueEndDebugUtilsLabelEXT) },
    { "QueueInsertDebugUtilsLabelEXT",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueInsertDebugUtilsLabelEXT) },
    { "CmdBeginDebugUtilsLabelEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBeginDebugUtilsLabelEXT) },
    { "CmdEndDebugUtilsLabelEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdEndDebugUtilsLabelEXT) },
    { "CmdInsertDebugUtilsLabelEXT",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdInsertDebugUtilsLabelEXT) },
    { "CreateDebugUtilsMessengerEXT",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDebugUtilsMessengerEXT) },
    { "DestroyDebugUtilsMessengerEXT",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyDebugUtilsMessengerEXT) },
    { "SubmitDebugUtilsMessageEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkSubmitDebugUtilsMessageEXT) },
    { "GetAndroidHardwareBufferPropertiesANDROID",                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetAndroidHardwareBufferPropertiesANDROID) },
    { "GetMemoryAndroidHardwareBufferANDROID",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryAndroidHardwareBufferANDROID) },
    { "CmdSetSampleLocationsEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetSampleLocationsEXT) },
    { "GetPhysicalDeviceMultisamplePropertiesEXT",                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceMultisamplePropertiesEXT) },
    { "GetImageDrmFormatModifierPropertiesEXT",                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageDrmFormatModifierPropertiesEXT) },
    { "CreateValidationCacheEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateValidationCacheEXT) },
    { "DestroyValidationCacheEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyValidationCacheEXT) },
    { "MergeValidationCachesEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkMergeValidationCachesEXT) },
    { "GetValidationCacheDataEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetValidationCacheDataEXT) },
    { "CmdBindShadingRateImageNV",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindShadingRateImageNV) },
    { "CmdSetViewportShadingRatePaletteNV",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetViewportShadingRatePaletteNV) },
    { "CmdSetCoarseSampleOrderNV",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCoarseSampleOrderNV) },
    { "CreateAccelerationStructureNV",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateAccelerationStructureNV) },
    { "DestroyAccelerationStructureNV",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyAccelerationStructureNV) },
    { "GetAccelerationStructureMemoryRequirementsNV",                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetAccelerationStructureMemoryRequirementsNV) },
    { "BindAccelerationStructureMemoryNV",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkBindAccelerationStructureMemoryNV) },
    { "CmdBuildAccelerationStructureNV",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBuildAccelerationStructureNV) },
    { "CmdCopyAccelerationStructureNV",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyAccelerationStructureNV) },
    { "CmdTraceRaysNV",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdTraceRaysNV) },
    { "CreateRayTracingPipelinesNV",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateRayTracingPipelinesNV) },
    { "GetRayTracingShaderGroupHandlesKHR",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetRayTracingShaderGroupHandlesKHR) },
    { "GetRayTracingShaderGroupHandlesNV",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetRayTracingShaderGroupHandlesNV) },
    { "GetAccelerationStructureHandleNV",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetAccelerationStructureHandleNV) },
    { "CmdWriteAccelerationStructuresPropertiesNV",                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWriteAccelerationStructuresPropertiesNV) },
    { "CompileDeferredNV",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCompileDeferredNV) },
    { "GetMemoryHostPointerPropertiesEXT",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryHostPointerPropertiesEXT) },
    { "CmdWriteBufferMarkerAMD",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWriteBufferMarkerAMD) },
    { "GetPhysicalDeviceCalibrateableTimeDomainsEXT",                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceCalibrateableTimeDomainsEXT) },
    { "GetCalibratedTimestampsEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetCalibratedTimestampsEXT) },
    { "CmdDrawMeshTasksNV",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawMeshTasksNV) },
    { "CmdDrawMeshTasksIndirectNV",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawMeshTasksIndirectNV) },
    { "CmdDrawMeshTasksIndirectCountNV",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawMeshTasksIndirectCountNV) },
    { "CmdSetExclusiveScissorEnableNV",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetExclusiveScissorEnableNV) },
    { "CmdSetExclusiveScissorNV",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetExclusiveScissorNV) },
    { "CmdSetCheckpointNV",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCheckpointNV) },
    { "GetQueueCheckpointDataNV",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetQueueCheckpointDataNV) },
    { "InitializePerformanceApiINTEL",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkInitializePerformanceApiINTEL) },
    { "UninitializePerformanceApiINTEL",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkUninitializePerformanceApiINTEL) },
    { "CmdSetPerformanceMarkerINTEL",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetPerformanceMarkerINTEL) },
    { "CmdSetPerformanceStreamMarkerINTEL",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetPerformanceStreamMarkerINTEL) },
    { "CmdSetPerformanceOverrideINTEL",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetPerformanceOverrideINTEL) },
    { "AcquirePerformanceConfigurationINTEL",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkAcquirePerformanceConfigurationINTEL) },
    { "ReleasePerformanceConfigurationINTEL",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkReleasePerformanceConfigurationINTEL) },
    { "QueueSetPerformanceConfigurationINTEL",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueSetPerformanceConfigurationINTEL) },
    { "GetPerformanceParameterINTEL",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPerformanceParameterINTEL) },
    { "SetLocalDimmingAMD",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetLocalDimmingAMD) },
    { "CreateImagePipeSurfaceFUCHSIA",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateImagePipeSurfaceFUCHSIA) },
    { "CreateMetalSurfaceEXT",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateMetalSurfaceEXT) },
    { "GetBufferDeviceAddressEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetBufferDeviceAddressEXT) },
    { "GetPhysicalDeviceToolPropertiesEXT",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceToolPropertiesEXT) },
    { "GetPhysicalDeviceCooperativeMatrixPropertiesNV",                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceCooperativeMatrixPropertiesNV) },
    { "GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV",                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV) },
    { "GetPhysicalDeviceSurfacePresentModes2EXT",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceSurfacePresentModes2EXT) },
    { "AcquireFullScreenExclusiveModeEXT",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkAcquireFullScreenExclusiveModeEXT) },
    { "ReleaseFullScreenExclusiveModeEXT",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkReleaseFullScreenExclusiveModeEXT) },
    { "GetDeviceGroupSurfacePresentModes2EXT",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceGroupSurfacePresentModes2EXT) },
    { "CreateHeadlessSurfaceEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateHeadlessSurfaceEXT) },
    { "CmdSetLineStippleEXT",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetLineStippleEXT) },
    { "ResetQueryPoolEXT",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkResetQueryPoolEXT) },
    { "CmdSetCullModeEXT",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCullModeEXT) },
    { "CmdSetFrontFaceEXT",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetFrontFaceEXT) },
    { "CmdSetPrimitiveTopologyEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetPrimitiveTopologyEXT) },
    { "CmdSetViewportWithCountEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetViewportWithCountEXT) },
    { "CmdSetScissorWithCountEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetScissorWithCountEXT) },
    { "CmdBindVertexBuffers2EXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindVertexBuffers2EXT) },
    { "CmdSetDepthTestEnableEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthTestEnableEXT) },
    { "CmdSetDepthWriteEnableEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthWriteEnableEXT) },
    { "CmdSetDepthCompareOpEXT",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthCompareOpEXT) },
    { "CmdSetDepthBoundsTestEnableEXT",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthBoundsTestEnableEXT) },
    { "CmdSetStencilTestEnableEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetStencilTestEnableEXT) },
    { "CmdSetStencilOpEXT",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetStencilOpEXT) },
    { "CopyMemoryToImageEXT",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCopyMemoryToImageEXT) },
    { "CopyImageToMemoryEXT",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCopyImageToMemoryEXT) },
    { "CopyImageToImageEXT",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCopyImageToImageEXT) },
    { "TransitionImageLayoutEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkTransitionImageLayoutEXT) },
    { "GetImageSubresourceLayout2EXT",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetImageSubresourceLayout2EXT) },
    { "ReleaseSwapchainImagesEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkReleaseSwapchainImagesEXT) },
    { "GetGeneratedCommandsMemoryRequirementsNV",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetGeneratedCommandsMemoryRequirementsNV) },
    { "CmdPreprocessGeneratedCommandsNV",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPreprocessGeneratedCommandsNV) },
    { "CmdExecuteGeneratedCommandsNV",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdExecuteGeneratedCommandsNV) },
    { "CmdBindPipelineShaderGroupNV",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindPipelineShaderGroupNV) },
    { "CreateIndirectCommandsLayoutNV",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateIndirectCommandsLayoutNV) },
    { "DestroyIndirectCommandsLayoutNV",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyIndirectCommandsLayoutNV) },
    { "CmdSetDepthBias2EXT",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthBias2EXT) },
    { "AcquireDrmDisplayEXT",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkAcquireDrmDisplayEXT) },
    { "GetDrmDisplayEXT",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDrmDisplayEXT) },
    { "CreatePrivateDataSlotEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreatePrivateDataSlotEXT) },
    { "DestroyPrivateDataSlotEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyPrivateDataSlotEXT) },
    { "SetPrivateDataEXT",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetPrivateDataEXT) },
    { "GetPrivateDataEXT",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPrivateDataEXT) },
    { "CmdSetFragmentShadingRateEnumNV",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetFragmentShadingRateEnumNV) },
    { "GetDeviceFaultInfoEXT",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceFaultInfoEXT) },
    { "AcquireWinrtDisplayNV",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkAcquireWinrtDisplayNV) },
    { "GetWinrtDisplayNV",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetWinrtDisplayNV) },
    { "CreateDirectFBSurfaceEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateDirectFBSurfaceEXT) },
    { "GetPhysicalDeviceDirectFBPresentationSupportEXT",                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceDirectFBPresentationSupportEXT) },
    { "CmdSetVertexInputEXT",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetVertexInputEXT) },
    { "GetMemoryZirconHandleFUCHSIA",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryZirconHandleFUCHSIA) },
    { "GetMemoryZirconHandlePropertiesFUCHSIA",                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryZirconHandlePropertiesFUCHSIA) },
    { "ImportSemaphoreZirconHandleFUCHSIA",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkImportSemaphoreZirconHandleFUCHSIA) },
    { "GetSemaphoreZirconHandleFUCHSIA",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetSemaphoreZirconHandleFUCHSIA) },
    { "CmdBindInvocationMaskHUAWEI",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindInvocationMaskHUAWEI) },
    { "GetMemoryRemoteAddressNV",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMemoryRemoteAddressNV) },
    { "CmdSetPatchControlPointsEXT",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetPatchControlPointsEXT) },
    { "CmdSetRasterizerDiscardEnableEXT",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetRasterizerDiscardEnableEXT) },
    { "CmdSetDepthBiasEnableEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthBiasEnableEXT) },
    { "CmdSetLogicOpEXT",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetLogicOpEXT) },
    { "CmdSetPrimitiveRestartEnableEXT",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetPrimitiveRestartEnableEXT) },
    { "CreateScreenSurfaceQNX",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateScreenSurfaceQNX) },
    { "GetPhysicalDeviceScreenPresentationSupportQNX",                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceScreenPresentationSupportQNX) },
    { "CmdSetColorWriteEnableEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetColorWriteEnableEXT) },
    { "CmdDrawMultiEXT",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawMultiEXT) },
    { "CmdDrawMultiIndexedEXT",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawMultiIndexedEXT) },
    { "CreateMicromapEXT",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateMicromapEXT) },
    { "DestroyMicromapEXT",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyMicromapEXT) },
    { "CmdBuildMicromapsEXT",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBuildMicromapsEXT) },
    { "BuildMicromapsEXT",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkBuildMicromapsEXT) },
    { "CopyMicromapEXT",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCopyMicromapEXT) },
    { "CopyMicromapToMemoryEXT",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCopyMicromapToMemoryEXT) },
    { "CopyMemoryToMicromapEXT",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCopyMemoryToMicromapEXT) },
    { "WriteMicromapsPropertiesEXT",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkWriteMicromapsPropertiesEXT) },
    { "CmdCopyMicromapEXT",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyMicromapEXT) },
    { "CmdCopyMicromapToMemoryEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyMicromapToMemoryEXT) },
    { "CmdCopyMemoryToMicromapEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyMemoryToMicromapEXT) },
    { "CmdWriteMicromapsPropertiesEXT",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWriteMicromapsPropertiesEXT) },
    { "GetDeviceMicromapCompatibilityEXT",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceMicromapCompatibilityEXT) },
    { "GetMicromapBuildSizesEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetMicromapBuildSizesEXT) },
    { "CmdDrawClusterHUAWEI",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawClusterHUAWEI) },
    { "CmdDrawClusterIndirectHUAWEI",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawClusterIndirectHUAWEI) },
    { "SetDeviceMemoryPriorityEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetDeviceMemoryPriorityEXT) },
    { "GetDescriptorSetLayoutHostMappingInfoVALVE",                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDescriptorSetLayoutHostMappingInfoVALVE) },
    { "GetDescriptorSetHostMappingVALVE",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDescriptorSetHostMappingVALVE) },
    { "GetPipelineIndirectMemoryRequirementsNV",                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPipelineIndirectMemoryRequirementsNV) },
    { "CmdUpdatePipelineIndirectBufferNV",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdUpdatePipelineIndirectBufferNV) },
    { "GetPipelineIndirectDeviceAddressNV",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPipelineIndirectDeviceAddressNV) },
    { "CmdSetDepthClampEnableEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthClampEnableEXT) },
    { "CmdSetPolygonModeEXT",                                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetPolygonModeEXT) },
    { "CmdSetRasterizationSamplesEXT",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetRasterizationSamplesEXT) },
    { "CmdSetSampleMaskEXT",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetSampleMaskEXT) },
    { "CmdSetAlphaToCoverageEnableEXT",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetAlphaToCoverageEnableEXT) },
    { "CmdSetAlphaToOneEnableEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetAlphaToOneEnableEXT) },
    { "CmdSetLogicOpEnableEXT",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetLogicOpEnableEXT) },
    { "CmdSetColorBlendEnableEXT",                                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetColorBlendEnableEXT) },
    { "CmdSetColorBlendEquationEXT",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetColorBlendEquationEXT) },
    { "CmdSetColorWriteMaskEXT",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetColorWriteMaskEXT) },
    { "CmdSetTessellationDomainOriginEXT",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetTessellationDomainOriginEXT) },
    { "CmdSetRasterizationStreamEXT",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetRasterizationStreamEXT) },
    { "CmdSetConservativeRasterizationModeEXT",                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetConservativeRasterizationModeEXT) },
    { "CmdSetExtraPrimitiveOverestimationSizeEXT",                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetExtraPrimitiveOverestimationSizeEXT) },
    { "CmdSetDepthClipEnableEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthClipEnableEXT) },
    { "CmdSetSampleLocationsEnableEXT",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetSampleLocationsEnableEXT) },
    { "CmdSetColorBlendAdvancedEXT",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetColorBlendAdvancedEXT) },
    { "CmdSetProvokingVertexModeEXT",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetProvokingVertexModeEXT) },
    { "CmdSetLineRasterizationModeEXT",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetLineRasterizationModeEXT) },
    { "CmdSetLineStippleEnableEXT",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetLineStippleEnableEXT) },
    { "CmdSetDepthClipNegativeOneToOneEXT",                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthClipNegativeOneToOneEXT) },
    { "CmdSetViewportWScalingEnableNV",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetViewportWScalingEnableNV) },
    { "CmdSetViewportSwizzleNV",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetViewportSwizzleNV) },
    { "CmdSetCoverageToColorEnableNV",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCoverageToColorEnableNV) },
    { "CmdSetCoverageToColorLocationNV",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCoverageToColorLocationNV) },
    { "CmdSetCoverageModulationModeNV",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCoverageModulationModeNV) },
    { "CmdSetCoverageModulationTableEnableNV",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCoverageModulationTableEnableNV) },
    { "CmdSetCoverageModulationTableNV",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCoverageModulationTableNV) },
    { "CmdSetShadingRateImageEnableNV",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetShadingRateImageEnableNV) },
    { "CmdSetRepresentativeFragmentTestEnableNV",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetRepresentativeFragmentTestEnableNV) },
    { "CmdSetCoverageReductionModeNV",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetCoverageReductionModeNV) },
    { "GetShaderModuleIdentifierEXT",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetShaderModuleIdentifierEXT) },
    { "GetShaderModuleCreateInfoIdentifierEXT",                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetShaderModuleCreateInfoIdentifierEXT) },
    { "GetPhysicalDeviceOpticalFlowImageFormatsNV",                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetPhysicalDeviceOpticalFlowImageFormatsNV) },
    { "CreateOpticalFlowSessionNV",                                                                        reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateOpticalFlowSessionNV) },
    { "DestroyOpticalFlowSessionNV",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyOpticalFlowSessionNV) },
    { "BindOpticalFlowSessionImageNV",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkBindOpticalFlowSessionImageNV) },
    { "CmdOpticalFlowExecuteNV",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdOpticalFlowExecuteNV) },
    { "AntiLagUpdateAMD",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkAntiLagUpdateAMD) },
    { "CreateShadersEXT",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateShadersEXT) },
    { "DestroyShaderEXT",                                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyShaderEXT) },
    { "GetShaderBinaryDataEXT",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetShaderBinaryDataEXT) },
    { "CmdBindShadersEXT",                                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBindShadersEXT) },
    { "CmdSetDepthClampRangeEXT",                                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetDepthClampRangeEXT) },
    { "GetFramebufferTilePropertiesQCOM",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetFramebufferTilePropertiesQCOM) },
    { "GetDynamicRenderingTilePropertiesQCOM",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDynamicRenderingTilePropertiesQCOM) },
    { "SetLatencySleepModeNV",                                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetLatencySleepModeNV) },
    { "LatencySleepNV",                                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkLatencySleepNV) },
    { "SetLatencyMarkerNV",                                                                                reinterpret_cast<PFN_vkVoidFunction>(encode::vkSetLatencyMarkerNV) },
    { "GetLatencyTimingsNV",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetLatencyTimingsNV) },
    { "QueueNotifyOutOfBandNV",                                                                            reinterpret_cast<PFN_vkVoidFunction>(encode::vkQueueNotifyOutOfBandNV) },
    { "CmdSetAttachmentFeedbackLoopEnableEXT",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetAttachmentFeedbackLoopEnableEXT) },
    { "GetGeneratedCommandsMemoryRequirementsEXT",                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetGeneratedCommandsMemoryRequirementsEXT) },
    { "CmdPreprocessGeneratedCommandsEXT",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdPreprocessGeneratedCommandsEXT) },
    { "CmdExecuteGeneratedCommandsEXT",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdExecuteGeneratedCommandsEXT) },
    { "CreateIndirectCommandsLayoutEXT",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateIndirectCommandsLayoutEXT) },
    { "DestroyIndirectCommandsLayoutEXT",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyIndirectCommandsLayoutEXT) },
    { "CreateIndirectExecutionSetEXT",                                                                     reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateIndirectExecutionSetEXT) },
    { "DestroyIndirectExecutionSetEXT",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyIndirectExecutionSetEXT) },
    { "UpdateIndirectExecutionSetPipelineEXT",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkUpdateIndirectExecutionSetPipelineEXT) },
    { "UpdateIndirectExecutionSetShaderEXT",                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkUpdateIndirectExecutionSetShaderEXT) },
    { "CreateAccelerationStructureKHR",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateAccelerationStructureKHR) },
    { "DestroyAccelerationStructureKHR",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkDestroyAccelerationStructureKHR) },
    { "CmdBuildAccelerationStructuresKHR",                                                                 reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBuildAccelerationStructuresKHR) },
    { "CmdBuildAccelerationStructuresIndirectKHR",                                                         reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdBuildAccelerationStructuresIndirectKHR) },
    { "BuildAccelerationStructuresKHR",                                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkBuildAccelerationStructuresKHR) },
    { "CopyAccelerationStructureKHR",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCopyAccelerationStructureKHR) },
    { "CopyAccelerationStructureToMemoryKHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCopyAccelerationStructureToMemoryKHR) },
    { "CopyMemoryToAccelerationStructureKHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCopyMemoryToAccelerationStructureKHR) },
    { "WriteAccelerationStructuresPropertiesKHR",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkWriteAccelerationStructuresPropertiesKHR) },
    { "CmdCopyAccelerationStructureKHR",                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyAccelerationStructureKHR) },
    { "CmdCopyAccelerationStructureToMemoryKHR",                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyAccelerationStructureToMemoryKHR) },
    { "CmdCopyMemoryToAccelerationStructureKHR",                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdCopyMemoryToAccelerationStructureKHR) },
    { "GetAccelerationStructureDeviceAddressKHR",                                                          reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetAccelerationStructureDeviceAddressKHR) },
    { "CmdWriteAccelerationStructuresPropertiesKHR",                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdWriteAccelerationStructuresPropertiesKHR) },
    { "GetDeviceAccelerationStructureCompatibilityKHR",                                                    reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetDeviceAccelerationStructureCompatibilityKHR) },
    { "GetAccelerationStructureBuildSizesKHR",                                                             reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetAccelerationStructureBuildSizesKHR) },
    { "CmdTraceRaysKHR",                                                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdTraceRaysKHR) },
    { "CreateRayTracingPipelinesKHR",                                                                      reinterpret_cast<PFN_vkVoidFunction>(encode::vkCreateRayTracingPipelinesKHR) },
    { "GetRayTracingCaptureReplayShaderGroupHandlesKHR",                                                   reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetRayTracingCaptureReplayShaderGroupHandlesKHR) },
    { "CmdTraceRaysIndirectKHR",                                                                           reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdTraceRaysIndirectKHR) },
    { "GetRayTracingShaderGroupStackSizeKHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkGetRayTracingShaderGroupStackSizeKHR) },
    { "CmdSetRayTracingPipelineStackSizeKHR",                                                              reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdSetRayTracingPipelineStackSizeKHR) },
    { "CmdDrawMeshTasksEXT",                                                                               reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawMeshTasksEXT) },
    { "CmdDrawMeshTasksIndirectEXT",                                                                       reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawMeshTasksIndirectEXT) },
    { "CmdDrawMeshTasksIndirectCountEXT",                                                                  reinterpret_cast<PFN_vkVoidFunction>(encode::vkCmdDrawMeshTasksIndirectCountEXT) },
    { "vk_layerGetPhysicalDeviceProcAddr",                                                                   reinterpret_cast<PFN_vkVoidFunction>(vulkan_entry::GetPhysicalDeviceProcAddr) },
};

GFXRECON_END_NAMESPACE(gfxrecon)

#endif
