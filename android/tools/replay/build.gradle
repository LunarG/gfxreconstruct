apply plugin: 'com.android.application'

android {
    compileSdkVersion 33
    ndkVersion '21.3.6528147'
    defaultConfig {
        applicationId "com.lunarg.gfxreconstruct.replay"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
    }

    sourceSets {
        debug {
            jniLibs.srcDirs "libs/debug"
        }

        release {
            jniLibs.srcDirs "libs/release"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation project(':layer')
}

task prepareArtifactFolders {
    mkdir "../../layer/build/intermediates/cmake/release/obj"
}

def ndk_abis
def ndkDir = android.ndkDirectory
def maxParallelForks = Runtime.runtime.availableProcessors()

task detectAbis {
    // Specify through command line which ABIs to build with -Pabis="..."
    if (project.hasProperty("abis")) {
        ndk_abis = project.getProperty("abis")
    } else {
        ndk_abis = "arm64-v8a armeabi-v7a"
    }
}

task runNdkBuildDebug(type: Exec, dependsOn: detectAbis) {
    executable = "$ndkDir/ndk-build"
    args = ["-j$maxParallelForks",
            "GFXRECON_SOURCE_DIR:=../..",
            "GFXRECON_INCLUDE_DIR:=../../..",
            "APP_ABI=${ndk_abis}",
            "NDK_DEBUG=1",
            "APP_BUILD_SCRIPT=../../jni/Android.mk",
            "NDK_APPLICATION_MK=../../jni/Application.mk",
            "NDK_OUT=${projectDir}/obj/debug",
            "NDK_LIBS_OUT=${projectDir}/libs/debug"]
}

task runNdkBuildRelease(type: Exec, dependsOn: detectAbis) {
    executable = "$ndkDir/ndk-build"
    args = ["-j$maxParallelForks",
            "GFXRECON_SOURCE_DIR:=../..",
            "GFXRECON_INCLUDE_DIR:=../../..",
            "APP_ABI=${ndk_abis}",
            "APP_BUILD_SCRIPT=../../jni/Android.mk",
            "NDK_APPLICATION_MK=../../jni/Application.mk",
            "NDK_OUT=${projectDir}/obj/release",
            "NDK_LIBS_OUT=${projectDir}/libs/release"]
}

task runNdkBuild(dependsOn: prepareArtifactFolders) {
    if (gradle.startParameter.taskNames.contains("assembleRelease")) {
        dependsOn runNdkBuildRelease
    }

    if (gradle.startParameter.taskNames.contains("assembleDebug")) {
        dependsOn runNdkBuildDebug
    }
}

preBuild {
    dependsOn runNdkBuild
}

task runNdkCleanDebug(type: Exec) {
    executable = "$ndkDir/ndk-build"
    args = ["GFXRECON_SOURCE_DIR:=../..",
            "GFXRECON_INCLUDE_DIR:=../../..",
            "NDK_DEBUG=1",
            "APP_BUILD_SCRIPT=../../jni/Android.mk",
            "NDK_APPLICATION_MK=../../jni/Application.mk",
            "NDK_OUT=${projectDir}/obj/debug",
            "NDK_LIBS_OUT=${projectDir}/libs/debug",
            "clean"]
}

task runNdkCleanRelease(type: Exec) {
    executable = "$ndkDir/ndk-build"
    args = ["GFXRECON_SOURCE_DIR:=../..",
            "GFXRECON_INCLUDE_DIR:=../../..",
            "NDK_DEBUG=0",
            "APP_BUILD_SCRIPT=../../jni/Android.mk",
            "NDK_APPLICATION_MK=../../jni/Application.mk",
            "NDK_OUT=${projectDir}/obj/release",
            "NDK_LIBS_OUT=${projectDir}/libs/release",
            "clean"]
}

task cleanNdkBuild {
    dependsOn runNdkCleanDebug
    dependsOn runNdkCleanRelease

    doLast {
        delete 'obj', 'libs', '../../layer/outputs'
    }
}

afterEvaluate {
    clean.finalizedBy { cleanNdkBuild }
}
